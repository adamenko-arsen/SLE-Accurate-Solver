!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/arsen/development/Курсова Робота/SLE-Accurate-Solver/Sources/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
A	GUI.hpp	/^    Matrix A{};$/;"	m	struct:LSEInputData	typeref:typename:Matrix	access:public
AddNew	LSESolver.cpp	/^void IterationsCounter::AddNew() noexcept$/;"	f	class:IterationsCounter	typeref:typename:void	signature:()
AddNew	LSESolver.hpp	/^    void AddNew() noexcept;$/;"	p	class:IterationsCounter	typeref:typename:void	access:public	signature:()
AllocArray2D	AllocArray2D.inc.hpp	/^    AllocArray2D() = default;$/;"	p	class:AllocArray2D	access:public	signature:()
AllocArray2D	AllocArray2D.inc.hpp	/^    explicit AllocArray2D(std::size_t width, std::size_t height)$/;"	f	class:AllocArray2D	access:public	signature:(std::size_t width,std::size_t height)
AllocArray2D	AllocArray2D.inc.hpp	/^class AllocArray2D$/;"	c
AllocArray2D::AllocArray2D	AllocArray2D.inc.hpp	/^    AllocArray2D() = default;$/;"	p	class:AllocArray2D	access:public	signature:()
AllocArray2D::AllocArray2D	AllocArray2D.inc.hpp	/^    explicit AllocArray2D(std::size_t width, std::size_t height)$/;"	f	class:AllocArray2D	access:public	signature:(std::size_t width,std::size_t height)
AllocArray2D::At	AllocArray2D.inc.hpp	/^    T& At(std::size_t y, std::size_t x)$/;"	f	class:AllocArray2D	typeref:typename:T &	access:public	signature:(std::size_t y,std::size_t x)
AllocArray2D::At	AllocArray2D.inc.hpp	/^    const T& At(std::size_t y, std::size_t x) const$/;"	f	class:AllocArray2D	typeref:typename:const T &	access:public	signature:(std::size_t y,std::size_t x) const
AllocArray2D::Height	AllocArray2D.inc.hpp	/^    std::size_t Height() const noexcept$/;"	f	class:AllocArray2D	typeref:typename:std::size_t	access:public	signature:() const
AllocArray2D::Width	AllocArray2D.inc.hpp	/^    std::size_t Width() const noexcept$/;"	f	class:AllocArray2D	typeref:typename:std::size_t	access:public	signature:() const
AllocArray2D::flatArray2DElemRef	AllocArray2D.inc.hpp	/^    T& flatArray2DElemRef(std::size_t y, std::size_t x)$/;"	f	class:AllocArray2D	typeref:typename:T &	access:private	signature:(std::size_t y,std::size_t x)
AllocArray2D::flatArray2DElemRef	AllocArray2D.inc.hpp	/^    const T& flatArray2DElemRef(std::size_t y, std::size_t x) const$/;"	f	class:AllocArray2D	typeref:typename:const T &	access:private	signature:(std::size_t y,std::size_t x) const
AllocArray2D::flattenArray2DVH	AllocArray2D.inc.hpp	/^    std::vector<T> flattenArray2DVH{};$/;"	m	class:AllocArray2D	typeref:typename:std::vector<T>	access:private
AllocArray2D::height	AllocArray2D.inc.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:AllocArray2D	typeref:typename:std::size_t	access:private
AllocArray2D::width	AllocArray2D.inc.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:AllocArray2D	typeref:typename:std::size_t	access:private
ApplicationData	GUI.hpp	/^    ApplicationData() = default;$/;"	p	class:ApplicationData	access:public	signature:()
ApplicationData	GUI.hpp	/^class ApplicationData$/;"	c
ApplicationData::ApplicationData	GUI.hpp	/^    ApplicationData() = default;$/;"	p	class:ApplicationData	access:public	signature:()
ApplicationData::GetLSEInputDataRef	GUI.hpp	/^    std::weak_ptr<LSEInputData> GetLSEInputDataRef()$/;"	f	class:ApplicationData	typeref:typename:std::weak_ptr<LSEInputData>	access:public	signature:()
ApplicationData::GetLSEOutputDataRef	GUI.hpp	/^    std::weak_ptr<LSESolveData> GetLSEOutputDataRef()$/;"	f	class:ApplicationData	typeref:typename:std::weak_ptr<LSESolveData>	access:public	signature:()
ApplicationData::lseInputData	GUI.hpp	/^    std::shared_ptr<LSEInputData> lseInputData$/;"	m	class:ApplicationData	typeref:typename:std::shared_ptr<LSEInputData>	access:private
ApplicationData::lseSolves	GUI.hpp	/^    std::shared_ptr<LSESolveData> lseSolves$/;"	m	class:ApplicationData	typeref:typename:std::shared_ptr<LSESolveData>	access:private
ApplicationWindow	GUI.cpp	/^ApplicationWindow::ApplicationWindow()$/;"	f	class:ApplicationWindow	signature:()
ApplicationWindow	GUI.hpp	/^    ApplicationWindow();$/;"	p	class:ApplicationWindow	access:public	signature:()
ApplicationWindow	GUI.hpp	/^class ApplicationWindow : public Gtk::Window$/;"	c	inherits:Gtk::Window
ApplicationWindow::ApplicationWindow	GUI.cpp	/^ApplicationWindow::ApplicationWindow()$/;"	f	class:ApplicationWindow	signature:()
ApplicationWindow::ApplicationWindow	GUI.hpp	/^    ApplicationWindow();$/;"	p	class:ApplicationWindow	access:public	signature:()
ApplicationWindow::ReadyWindow	GUI.cpp	/^void ApplicationWindow::ReadyWindow()$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:()
ApplicationWindow::ReadyWindow	GUI.hpp	/^    void ReadyWindow();$/;"	p	class:ApplicationWindow	typeref:typename:void	access:public	signature:()
ApplicationWindow::SetApplicationData	GUI.cpp	/^void ApplicationWindow::SetApplicationData(std::weak_ptr<ApplicationData> appData)$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:(std::weak_ptr<ApplicationData> appData)
ApplicationWindow::SetApplicationData	GUI.hpp	/^    void SetApplicationData(std::weak_ptr<ApplicationData> appData);$/;"	p	class:ApplicationWindow	typeref:typename:void	access:public	signature:(std::weak_ptr<ApplicationData> appData)
ApplicationWindow::fixedLayout	GUI.hpp	/^    Gtk::Fixed fixedLayout;$/;"	m	class:ApplicationWindow	typeref:typename:Gtk::Fixed	access:private
ApplicationWindow::initializeWidgets	GUI.cpp	/^void ApplicationWindow::initializeWidgets()$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:()
ApplicationWindow::initializeWidgets	GUI.hpp	/^    void initializeWidgets();$/;"	p	class:ApplicationWindow	typeref:typename:void	access:private	signature:()
ApplicationWindow::initializeWindowHead	GUI.cpp	/^void ApplicationWindow::initializeWindowHead()$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:()
ApplicationWindow::initializeWindowHead	GUI.hpp	/^    void initializeWindowHead();$/;"	p	class:ApplicationWindow	typeref:typename:void	access:private	signature:()
ApplicationWindow::lseConfigurator	GUI.hpp	/^    LSEConfigurator lseConfigurator;$/;"	m	class:ApplicationWindow	typeref:typename:LSEConfigurator	access:private
ApplicationWindow::lseSolveOutput	GUI.hpp	/^    std::shared_ptr<LSESolveOutput> lseSolveOutput = std::make_shared<LSESolveOutput>();$/;"	m	class:ApplicationWindow	typeref:typename:std::shared_ptr<LSESolveOutput>	access:private
ApplicationWindow::lseSolver	GUI.hpp	/^    LSESolverUI     lseSolver;$/;"	m	class:ApplicationWindow	typeref:typename:LSESolverUI	access:private
ApplicationWindow::windowBorderWidth	GUI.hpp	/^    CLASS_CONST auto windowBorderWidth = 10;$/;"	m	class:ApplicationWindow	typeref:typename:CLASS_CONST auto	access:private
ApplicationWindow::windowSize	GUI.hpp	/^    CLASS_CONST auto windowSize = std::pair(1000, 600);$/;"	m	class:ApplicationWindow	typeref:typename:CLASS_CONST auto	access:private
ApplicationWindow::windowTitle	GUI.hpp	/^    CLASS_CONST auto windowTitle = "Розв'язальник СЛАР";$/;"	m	class:ApplicationWindow	typeref:typename:CLASS_CONST auto	access:private
At	AllocArray2D.inc.hpp	/^    T& At(std::size_t y, std::size_t x)$/;"	f	class:AllocArray2D	typeref:typename:T &	access:public	signature:(std::size_t y,std::size_t x)
At	AllocArray2D.inc.hpp	/^    const T& At(std::size_t y, std::size_t x) const$/;"	f	class:AllocArray2D	typeref:typename:const T &	access:public	signature:(std::size_t y,std::size_t x) const
At	Matrix.cpp	/^double Matrix::At(std::size_t y, std::size_t x) const$/;"	f	class:Matrix	typeref:typename:double	signature:(std::size_t y,std::size_t x) const
At	Matrix.cpp	/^double& Matrix::At(std::size_t y, std::size_t x)$/;"	f	class:Matrix	typeref:typename:double &	signature:(std::size_t y,std::size_t x)
At	Matrix.hpp	/^    double At(std::size_t y, std::size_t x) const;$/;"	p	class:Matrix	typeref:typename:double	access:public	signature:(std::size_t y,std::size_t x) const
At	Matrix.hpp	/^    double& At(std::size_t y, std::size_t x);$/;"	p	class:Matrix	typeref:typename:double &	access:public	signature:(std::size_t y,std::size_t x)
B	GUI.hpp	/^    Vector B{};$/;"	m	struct:LSEInputData	typeref:typename:Vector	access:public
BaseStatus	LSESolver.hpp	/^enum class BaseStatus : bool$/;"	g	typeref:typename:bool
CLASS_CONST	GUI.hpp	/^#define CLASS_CONST /;"	d
CLISession	CLI.hpp	/^class CLISession$/;"	c
CLISession::Run	CLI.cpp	/^int CLISession::Run(int argc, char *argv[])$/;"	f	class:CLISession	typeref:typename:int	signature:(int argc,char * argv[])
CLISession::Run	CLI.hpp	/^    int Run(int argc, char *argv[]);$/;"	p	class:CLISession	typeref:typename:int	access:public	signature:(int argc,char * argv[])
ClearSolve	GUI.cpp	/^void LSESolveOutput::ClearSolve()$/;"	f	class:LSESolveOutput	typeref:typename:void	signature:()
ClearSolve	GUI.hpp	/^    void ClearSolve();$/;"	p	class:LSESolveOutput	typeref:typename:void	access:public	signature:()
ComboBoxMethodRecord	LSESolversData.hpp	/^struct ComboBoxMethodRecord$/;"	s
ComboBoxMethodRecord::MethodName	LSESolversData.hpp	/^    std::string MethodName{"[не вказано]"};$/;"	m	struct:ComboBoxMethodRecord	typeref:typename:std::string	access:public
ComboBoxMethodRecord::MethodPracticalItersComplexity	LSESolversData.hpp	/^    std::string MethodPracticalItersComplexity{"невідомо"};$/;"	m	struct:ComboBoxMethodRecord	typeref:typename:std::string	access:public
ComboBoxMethodRecord::SolvingMethodIndex	LSESolversData.hpp	/^    LSESolvingMethodIndex SolvingMethodIndex;$/;"	m	struct:ComboBoxMethodRecord	typeref:typename:LSESolvingMethodIndex	access:public
D	LSESolvers/GaussHoletskiySolver.hpp	/^    Matrix L, D;$/;"	m	struct:LDLDecResult	typeref:typename:Matrix	access:public
EqsCount	GUI.hpp	/^    std::size_t EqsCount = 0;$/;"	m	struct:LSEInputData	typeref:typename:std::size_t	access:public
Error	LSESolver.cpp	/^SolvingResult SolvingResult::Error()$/;"	f	class:SolvingResult	typeref:typename:SolvingResult	signature:()
Error	LSESolver.hpp	/^    Success, Error$/;"	e	enum:BaseStatus	access:public
Error	LSESolver.hpp	/^    static SolvingResult Error();$/;"	p	struct:SolvingResult	typeref:typename:SolvingResult	access:public	signature:()
FormatExecTime	GUI.cpp	/^std::string FormatExecTime(double execTime)$/;"	f	typeref:typename:std::string	signature:(double execTime)
FormatExecTime::functions::toInt	GUI.cpp	/^        static std::ptrdiff_t toInt(double x)$/;"	f	struct:FormatExecTime::functions	typeref:typename:std::ptrdiff_t	file:	access:public	signature:(double x)
GUISession	GUI.cpp	/^GUISession::GUISession() = default;$/;"	p	class:GUISession	file:	signature:()
GUISession	GUI.hpp	/^    GUISession();$/;"	p	class:GUISession	access:public	signature:()
GUISession	GUI.hpp	/^class GUISession$/;"	c
GUISession::GUISession	GUI.cpp	/^GUISession::GUISession() = default;$/;"	p	class:GUISession	file:	signature:()
GUISession::GUISession	GUI.hpp	/^    GUISession();$/;"	p	class:GUISession	access:public	signature:()
GUISession::GetWindow	GUI.cpp	/^Gtk::Window& GUISession::GetWindow()$/;"	f	class:GUISession	typeref:typename:Gtk::Window &	signature:()
GUISession::GetWindow	GUI.hpp	/^    Gtk::Window& GetWindow();$/;"	p	class:GUISession	typeref:typename:Gtk::Window &	access:public	signature:()
GUISession::Init	GUI.cpp	/^void GUISession::Init(int argc, char *argv[])$/;"	f	class:GUISession	typeref:typename:void	signature:(int argc,char * argv[])
GUISession::Init	GUI.hpp	/^    void Init(int argc, char *argv[]);$/;"	p	class:GUISession	typeref:typename:void	access:public	signature:(int argc,char * argv[])
GUISession::appData	GUI.hpp	/^    std::shared_ptr<ApplicationData> appData = std::make_shared<ApplicationData>();$/;"	m	class:GUISession	typeref:typename:std::shared_ptr<ApplicationData>	access:private
GUISession::appWin	GUI.hpp	/^    ApplicationWindow appWin{};$/;"	m	class:GUISession	typeref:typename:ApplicationWindow	access:private
GaussHoletskiy	LSESolversData.hpp	/^    , GaussHoletskiy = 1$/;"	e	enum:LSESolvingMethodIndex	access:public
GaussHoletskiySolver	LSESolvers/GaussHoletskiySolver.hpp	/^class GaussHoletskiySolver : public LSESolver$/;"	c	inherits:LSESolver
GaussHoletskiySolver::SolveLSEInternal	LSESolvers/GaussHoletskiySolver.cpp	/^SolvingResult GaussHoletskiySolver::SolveLSEInternal(Matrix&& A, Vector&& B)$/;"	f	class:GaussHoletskiySolver	typeref:typename:SolvingResult	signature:(Matrix && A,Vector && B)
GaussHoletskiySolver::SolveLSEInternal	LSESolvers/GaussHoletskiySolver.hpp	/^    SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B);$/;"	p	class:GaussHoletskiySolver	typeref:typename:SolvingResult	access:protected	signature:(Matrix && A,Vector && B)
GaussHoletskiySolver::isCloseToZero	LSESolvers/GaussHoletskiySolver.cpp	/^bool GaussHoletskiySolver::isCloseToZero(double x)$/;"	f	class:GaussHoletskiySolver	typeref:typename:bool	signature:(double x)
GaussHoletskiySolver::isCloseToZero	LSESolvers/GaussHoletskiySolver.hpp	/^    static bool isCloseToZero(double x);$/;"	p	class:GaussHoletskiySolver	typeref:typename:bool	access:private	signature:(double x)
GaussHoletskiySolver::isCloseToZeroForSolves	LSESolvers/GaussHoletskiySolver.cpp	/^bool GaussHoletskiySolver::isCloseToZeroForSolves(double x)$/;"	f	class:GaussHoletskiySolver	typeref:typename:bool	signature:(double x)
GaussHoletskiySolver::isCloseToZeroForSolves	LSESolvers/GaussHoletskiySolver.hpp	/^    static bool isCloseToZeroForSolves(double x);$/;"	p	class:GaussHoletskiySolver	typeref:typename:bool	access:private	signature:(double x)
GaussHoletskiySolver::isSolveSuitable	LSESolvers/GaussHoletskiySolver.cpp	/^bool GaussHoletskiySolver::isSolveSuitable(const Matrix& A, const Vector& B, const Vector& X)$/;"	f	class:GaussHoletskiySolver	typeref:typename:bool	signature:(const Matrix & A,const Vector & B,const Vector & X)
GaussHoletskiySolver::isSolveSuitable	LSESolvers/GaussHoletskiySolver.hpp	/^    static bool isSolveSuitable(const Matrix& A, const Vector& B, const Vector& X);$/;"	p	class:GaussHoletskiySolver	typeref:typename:bool	access:private	signature:(const Matrix & A,const Vector & B,const Vector & X)
GaussHoletskiySolver::ldlDecompose	LSESolvers/GaussHoletskiySolver.cpp	/^std::optional<LDLDecResult> GaussHoletskiySolver::ldlDecompose(const Matrix& A, IterationsCounte/;"	f	class:GaussHoletskiySolver	typeref:typename:std::optional<LDLDecResult>	signature:(const Matrix & A,IterationsCounter & itersCounter)
GaussHoletskiySolver::ldlDecompose	LSESolvers/GaussHoletskiySolver.hpp	/^    static std::optional<LDLDecResult> ldlDecompose(const Matrix& A, IterationsCounter& itersCou/;"	p	class:GaussHoletskiySolver	typeref:typename:std::optional<LDLDecResult>	access:private	signature:(const Matrix & A,IterationsCounter & itersCounter)
GaussHoletskiySolver::solveX	LSESolvers/GaussHoletskiySolver.cpp	/^Vector GaussHoletskiySolver::solveX(const Matrix& L, const Vector& Z, IterationsCounter& itersCo/;"	f	class:GaussHoletskiySolver	typeref:typename:Vector	signature:(const Matrix & L,const Vector & Z,IterationsCounter & itersCounter)
GaussHoletskiySolver::solveX	LSESolvers/GaussHoletskiySolver.hpp	/^    static Vector solveX(const Matrix& L, const Vector& Z, IterationsCounter& itersCounter);$/;"	p	class:GaussHoletskiySolver	typeref:typename:Vector	access:private	signature:(const Matrix & L,const Vector & Z,IterationsCounter & itersCounter)
GaussHoletskiySolver::solveY	LSESolvers/GaussHoletskiySolver.cpp	/^Vector GaussHoletskiySolver::solveY(const Matrix& L, const Vector& B, IterationsCounter& itersCo/;"	f	class:GaussHoletskiySolver	typeref:typename:Vector	signature:(const Matrix & L,const Vector & B,IterationsCounter & itersCounter)
GaussHoletskiySolver::solveY	LSESolvers/GaussHoletskiySolver.hpp	/^    static Vector solveY(const Matrix& L, const Vector& B, IterationsCounter& itersCounter);$/;"	p	class:GaussHoletskiySolver	typeref:typename:Vector	access:private	signature:(const Matrix & L,const Vector & B,IterationsCounter & itersCounter)
GaussHoletskiySolver::solveZ	LSESolvers/GaussHoletskiySolver.cpp	/^std::optional<Vector> GaussHoletskiySolver::solveZ(const Matrix& D, const Vector& Y, IterationsC/;"	f	class:GaussHoletskiySolver	typeref:typename:std::optional<Vector>	signature:(const Matrix & D,const Vector & Y,IterationsCounter & itersCounter)
GaussHoletskiySolver::solveZ	LSESolvers/GaussHoletskiySolver.hpp	/^    static std::optional<Vector> solveZ(const Matrix& D, const Vector& Y, IterationsCounter& ite/;"	p	class:GaussHoletskiySolver	typeref:typename:std::optional<Vector>	access:private	signature:(const Matrix & D,const Vector & Y,IterationsCounter & itersCounter)
GaussHoletskiySolver::~GaussHoletskiySolver	LSESolvers/GaussHoletskiySolver.hpp	/^    ~GaussHoletskiySolver() override = default;$/;"	p	class:GaussHoletskiySolver	access:public	signature:()
GetCoeffAFancyLabel	GUI.cpp	/^std::string GetCoeffAFancyLabel(double y, double x)$/;"	f	typeref:typename:std::string	signature:(double y,double x)
GetCoeffAShortLabel	GUI.cpp	/^std::string GetCoeffAShortLabel(double y, double x)$/;"	f	typeref:typename:std::string	signature:(double y,double x)
GetCoeffBFancyLabel	GUI.cpp	/^std::string GetCoeffBFancyLabel(double eqIndex)$/;"	f	typeref:typename:std::string	signature:(double eqIndex)
GetCoeffBShortLabel	GUI.cpp	/^std::string GetCoeffBShortLabel(double eqIndex)$/;"	f	typeref:typename:std::string	signature:(double eqIndex)
GetCurrentFormalTime	GUI.cpp	/^std::string GetCurrentFormalTime()$/;"	f	typeref:typename:std::string	signature:()
GetLSEInputDataRef	GUI.hpp	/^    std::weak_ptr<LSEInputData> GetLSEInputDataRef()$/;"	f	class:ApplicationData	typeref:typename:std::weak_ptr<LSEInputData>	access:public	signature:()
GetLSEOutputDataRef	GUI.hpp	/^    std::weak_ptr<LSESolveData> GetLSEOutputDataRef()$/;"	f	class:ApplicationData	typeref:typename:std::weak_ptr<LSESolveData>	access:public	signature:()
GetTimeDifference	GUI.cpp	/^    double GetTimeDifference()$/;"	f	class:TimeDifferenceRuler	typeref:typename:double	file:	access:public	signature:()
GetTimeSeconds	GUI.cpp	/^std::ptrdiff_t GetTimeSeconds()$/;"	f	typeref:typename:std::ptrdiff_t	signature:()
GetTotalCount	LSESolver.cpp	/^std::size_t IterationsCounter::GetTotalCount() const noexcept$/;"	f	class:IterationsCounter	typeref:typename:std::size_t	signature:() const
GetTotalCount	LSESolver.hpp	/^    std::size_t GetTotalCount() const noexcept;$/;"	p	class:IterationsCounter	typeref:typename:std::size_t	access:public	signature:() const
GetTotalIterationsCount	LSESolver.cpp	/^std::optional<std::size_t> LSESolver::GetTotalIterationsCount()$/;"	f	class:LSESolver	typeref:typename:std::optional<std::size_t>	signature:()
GetTotalIterationsCount	LSESolver.hpp	/^    std::optional<std::size_t> GetTotalIterationsCount();$/;"	p	class:LSESolver	typeref:typename:std::optional<std::size_t>	access:public	signature:()
GetVariablesSolvesOnce	LSESolver.cpp	/^std::optional<Vector> LSESolver::GetVariablesSolvesOnce()$/;"	f	class:LSESolver	typeref:typename:std::optional<Vector>	signature:()
GetVariablesSolvesOnce	LSESolver.hpp	/^    std::optional<Vector> GetVariablesSolvesOnce();$/;"	p	class:LSESolver	typeref:typename:std::optional<Vector>	access:public	signature:()
GetWindow	GUI.cpp	/^Gtk::Window& GUISession::GetWindow()$/;"	f	class:GUISession	typeref:typename:Gtk::Window &	signature:()
GetWindow	GUI.hpp	/^    Gtk::Window& GetWindow();$/;"	p	class:GUISession	typeref:typename:Gtk::Window &	access:public	signature:()
Height	AllocArray2D.inc.hpp	/^    std::size_t Height() const noexcept$/;"	f	class:AllocArray2D	typeref:typename:std::size_t	access:public	signature:() const
Height	Matrix.cpp	/^std::size_t Matrix::Height() const noexcept$/;"	f	class:Matrix	typeref:typename:std::size_t	signature:() const
Height	Matrix.hpp	/^    std::size_t Height() const noexcept;$/;"	p	class:Matrix	typeref:typename:std::size_t	access:public	signature:() const
Init	GUI.cpp	/^void GUISession::Init(int argc, char *argv[])$/;"	f	class:GUISession	typeref:typename:void	signature:(int argc,char * argv[])
Init	GUI.hpp	/^    void Init(int argc, char *argv[]);$/;"	p	class:GUISession	typeref:typename:void	access:public	signature:(int argc,char * argv[])
Input	CLI.cpp	/^static std::string Input(const std::string& prompt = "")$/;"	f	typeref:typename:std::string	file:	signature:(const std::string & prompt="")
IsLSESoledSuccessfully	LSESolver.cpp	/^std::optional<bool> LSESolver::IsLSESoledSuccessfully() const$/;"	f	class:LSESolver	typeref:typename:std::optional<bool>	signature:() const
IsLSESoledSuccessfully	LSESolver.hpp	/^    std::optional<bool> IsLSESoledSuccessfully() const;$/;"	p	class:LSESolver	typeref:typename:std::optional<bool>	access:public	signature:() const
IsSetted	GUI.hpp	/^    bool IsSetted = false;$/;"	m	struct:LSEInputData	typeref:typename:bool	access:public
IsSquare	Matrix.cpp	/^bool Matrix::IsSquare() const noexcept$/;"	f	class:Matrix	typeref:typename:bool	signature:() const
IsSquare	Matrix.hpp	/^    bool IsSquare() const noexcept;$/;"	p	class:Matrix	typeref:typename:bool	access:public	signature:() const
IsSuccessful	LSESolver.hpp	/^    bool IsSuccessful = false;$/;"	m	struct:SolvingResult	typeref:typename:bool	access:public
IterationsCounter	LSESolver.cpp	/^IterationsCounter::IterationsCounter() = default;$/;"	p	class:IterationsCounter	file:	signature:()
IterationsCounter	LSESolver.hpp	/^    IterationsCounter();$/;"	p	class:IterationsCounter	access:public	signature:()
IterationsCounter	LSESolver.hpp	/^class IterationsCounter$/;"	c
IterationsCounter::AddNew	LSESolver.cpp	/^void IterationsCounter::AddNew() noexcept$/;"	f	class:IterationsCounter	typeref:typename:void	signature:()
IterationsCounter::AddNew	LSESolver.hpp	/^    void AddNew() noexcept;$/;"	p	class:IterationsCounter	typeref:typename:void	access:public	signature:()
IterationsCounter::GetTotalCount	LSESolver.cpp	/^std::size_t IterationsCounter::GetTotalCount() const noexcept$/;"	f	class:IterationsCounter	typeref:typename:std::size_t	signature:() const
IterationsCounter::GetTotalCount	LSESolver.hpp	/^    std::size_t GetTotalCount() const noexcept;$/;"	p	class:IterationsCounter	typeref:typename:std::size_t	access:public	signature:() const
IterationsCounter::IterationsCounter	LSESolver.cpp	/^IterationsCounter::IterationsCounter() = default;$/;"	p	class:IterationsCounter	file:	signature:()
IterationsCounter::IterationsCounter	LSESolver.hpp	/^    IterationsCounter();$/;"	p	class:IterationsCounter	access:public	signature:()
IterationsCounter::itersCount	LSESolver.hpp	/^    std::size_t itersCount = 0;$/;"	m	class:IterationsCounter	typeref:typename:std::size_t	access:private
ItersCount	LSESolver.hpp	/^    std::size_t ItersCount = 0;$/;"	m	struct:SolvingResult	typeref:typename:std::size_t	access:public
L	LSESolvers/GaussHoletskiySolver.hpp	/^    Matrix L, D;$/;"	m	struct:LDLDecResult	typeref:typename:Matrix	access:public
L	LSESolvers/LUPSolver.hpp	/^    Matrix L, U;$/;"	m	struct:LUPDecResult	typeref:typename:Matrix	access:public
LDLDecResult	LSESolvers/GaussHoletskiySolver.hpp	/^struct LDLDecResult$/;"	s
LDLDecResult::D	LSESolvers/GaussHoletskiySolver.hpp	/^    Matrix L, D;$/;"	m	struct:LDLDecResult	typeref:typename:Matrix	access:public
LDLDecResult::L	LSESolvers/GaussHoletskiySolver.hpp	/^    Matrix L, D;$/;"	m	struct:LDLDecResult	typeref:typename:Matrix	access:public
LSEConfigurator	GUI.cpp	/^LSEConfigurator::LSEConfigurator()$/;"	f	class:LSEConfigurator	signature:()
LSEConfigurator	GUI.hpp	/^    LSEConfigurator();$/;"	p	class:LSEConfigurator	access:public	signature:()
LSEConfigurator	GUI.hpp	/^class LSEConfigurator : public Gtk::Frame$/;"	c	inherits:Gtk::Frame
LSEConfigurator::LSEConfigurator	GUI.cpp	/^LSEConfigurator::LSEConfigurator()$/;"	f	class:LSEConfigurator	signature:()
LSEConfigurator::LSEConfigurator	GUI.hpp	/^    LSEConfigurator();$/;"	p	class:LSEConfigurator	access:public	signature:()
LSEConfigurator::SetLSEInputData	GUI.cpp	/^void LSEConfigurator::SetLSEInputData(std::weak_ptr<LSEInputData> lseInputData)$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:(std::weak_ptr<LSEInputData> lseInputData)
LSEConfigurator::SetLSEInputData	GUI.hpp	/^    void SetLSEInputData(std::weak_ptr<LSEInputData> lseInputData);$/;"	p	class:LSEConfigurator	typeref:typename:void	access:public	signature:(std::weak_ptr<LSEInputData> lseInputData)
LSEConfigurator::boxLayout	GUI.hpp	/^    Gtk::Box boxLayout{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Box	access:private
LSEConfigurator::createEqsForm	GUI.cpp	/^void LSEConfigurator::createEqsForm(std::size_t eqsCount)$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:(std::size_t eqsCount)
LSEConfigurator::createEqsForm	GUI.hpp	/^    void createEqsForm(std::size_t eqsCount);$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:(std::size_t eqsCount)
LSEConfigurator::eqsConfStatus	GUI.hpp	/^    Gtk::Label eqsConfStatus{"Невідомий статус"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
LSEConfigurator::eqsCountFirstHorAlign	GUI.hpp	/^    Gtk::Alignment eqsCountFirstHorAlign{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Alignment	access:private
LSEConfigurator::eqsCountProp	GUI.hpp	/^    Gtk::Label eqsCountProp{"Кількість рівнянь:"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
LSEConfigurator::eqsCountValue	GUI.hpp	/^    Gtk::Label eqsCountValue{"не вказано"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
LSEConfigurator::eqsFormBox	GUI.hpp	/^    Gtk::Box eqsFormBox{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Box	access:private
LSEConfigurator::eqsPropConfGrid	GUI.hpp	/^    Gtk::Grid eqsPropConfGrid{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Grid	access:private
LSEConfigurator::eqsSetAsInput	GUI.hpp	/^    Gtk::Button eqsSetAsInput{"Встановити дану СЛАР"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Button	access:private
LSEConfigurator::eqsSetterButton	GUI.hpp	/^    Gtk::Button eqsSetterButton{"Нова СЛАР"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Button	access:private
LSEConfigurator::eqsSetterEntry	GUI.hpp	/^    Gtk::Entry  eqsSetterEntry{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Entry	access:private
LSEConfigurator::eqsSetterProp	GUI.hpp	/^    Gtk::Label  eqsSetterProp{"Встановити кількість:"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
LSEConfigurator::eqsZeroFillerButton	GUI.hpp	/^    Gtk::Button eqsZeroFillerButton{"Заповнити пусті кліт. 0-ми"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Button	access:private
LSEConfigurator::fillEmptyEntriesWithZeroes	GUI.cpp	/^void LSEConfigurator::fillEmptyEntriesWithZeroes()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
LSEConfigurator::fillEmptyEntriesWithZeroes	GUI.hpp	/^    void fillEmptyEntriesWithZeroes();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
LSEConfigurator::freeCoeffsEntries	GUI.hpp	/^    std::vector<Gtk::Entry>  freeCoeffsEntries{};$/;"	m	class:LSEConfigurator	typeref:typename:std::vector<Gtk::Entry>	access:private
LSEConfigurator::freeCoeffsGrid	GUI.hpp	/^    Gtk::Grid freeCoeffsGrid{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Grid	access:private
LSEConfigurator::initializeEqsCount	GUI.cpp	/^void LSEConfigurator::initializeEqsCount()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
LSEConfigurator::initializeEqsCount	GUI.hpp	/^    void initializeEqsCount();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
LSEConfigurator::initializeEqsForm	GUI.cpp	/^void LSEConfigurator::initializeEqsForm()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
LSEConfigurator::initializeEqsForm	GUI.hpp	/^    void initializeEqsForm();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
LSEConfigurator::lseData	GUI.hpp	/^    std::weak_ptr<LSEInputData> lseData{};$/;"	m	class:LSEConfigurator	typeref:typename:std::weak_ptr<LSEInputData>	access:private
LSEConfigurator::onEqsCountSetting	GUI.cpp	/^void LSEConfigurator::onEqsCountSetting()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
LSEConfigurator::onEqsCountSetting	GUI.hpp	/^    void onEqsCountSetting();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
LSEConfigurator::removeEqsForm	GUI.cpp	/^void LSEConfigurator::removeEqsForm()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
LSEConfigurator::removeEqsForm	GUI.hpp	/^    void removeEqsForm();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
LSEConfigurator::setEqsAsInput	GUI.cpp	/^void LSEConfigurator::setEqsAsInput()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
LSEConfigurator::setEqsAsInput	GUI.hpp	/^    void setEqsAsInput();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
LSEConfigurator::varsCoeffsEntries	GUI.hpp	/^    AllocArray2D<Gtk::Entry> varsCoeffsEntries{};$/;"	m	class:LSEConfigurator	typeref:typename:AllocArray2D<Gtk::Entry>	access:private
LSEConfigurator::varsCoeffsGrid	GUI.hpp	/^    Gtk::Grid varsCoeffsGrid{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Grid	access:private
LSEInputData	GUI.hpp	/^struct LSEInputData$/;"	s
LSEInputData::A	GUI.hpp	/^    Matrix A{};$/;"	m	struct:LSEInputData	typeref:typename:Matrix	access:public
LSEInputData::B	GUI.hpp	/^    Vector B{};$/;"	m	struct:LSEInputData	typeref:typename:Vector	access:public
LSEInputData::EqsCount	GUI.hpp	/^    std::size_t EqsCount = 0;$/;"	m	struct:LSEInputData	typeref:typename:std::size_t	access:public
LSEInputData::IsSetted	GUI.hpp	/^    bool IsSetted = false;$/;"	m	struct:LSEInputData	typeref:typename:bool	access:public
LSESolveData	GUI.hpp	/^struct LSESolveData$/;"	s
LSESolveData::SolvingStatus	GUI.hpp	/^    LSESolvingStatus SolvingStatus = LSESolvingStatus::Unsolved;$/;"	m	struct:LSESolveData	typeref:typename:LSESolvingStatus	access:public
LSESolveData::X	GUI.hpp	/^    Vector X{};$/;"	m	struct:LSESolveData	typeref:typename:Vector	access:public
LSESolveOutput	GUI.cpp	/^LSESolveOutput::LSESolveOutput()$/;"	f	class:LSESolveOutput	signature:()
LSESolveOutput	GUI.hpp	/^    LSESolveOutput();$/;"	p	class:LSESolveOutput	access:public	signature:()
LSESolveOutput	GUI.hpp	/^class LSESolveOutput : public Gtk::Frame$/;"	c	inherits:Gtk::Frame
LSESolveOutput::ClearSolve	GUI.cpp	/^void LSESolveOutput::ClearSolve()$/;"	f	class:LSESolveOutput	typeref:typename:void	signature:()
LSESolveOutput::ClearSolve	GUI.hpp	/^    void ClearSolve();$/;"	p	class:LSESolveOutput	typeref:typename:void	access:public	signature:()
LSESolveOutput::LSESolveOutput	GUI.cpp	/^LSESolveOutput::LSESolveOutput()$/;"	f	class:LSESolveOutput	signature:()
LSESolveOutput::LSESolveOutput	GUI.hpp	/^    LSESolveOutput();$/;"	p	class:LSESolveOutput	access:public	signature:()
LSESolveOutput::OutputSolve	GUI.cpp	/^void LSESolveOutput::OutputSolve()$/;"	f	class:LSESolveOutput	typeref:typename:void	signature:()
LSESolveOutput::OutputSolve	GUI.hpp	/^    void OutputSolve();$/;"	p	class:LSESolveOutput	typeref:typename:void	access:public	signature:()
LSESolveOutput::SetLSEInputDataRef	GUI.hpp	/^    void SetLSEInputDataRef(std::weak_ptr<LSEInputData> lseInputData)$/;"	f	class:LSESolveOutput	typeref:typename:void	access:public	signature:(std::weak_ptr<LSEInputData> lseInputData)
LSESolveOutput::SetLSEOutputDataRef	GUI.hpp	/^    void SetLSEOutputDataRef(std::weak_ptr<LSESolveData> lseSolveData)$/;"	f	class:LSESolveOutput	typeref:typename:void	access:public	signature:(std::weak_ptr<LSESolveData> lseSolveData)
LSESolveOutput::boxLayout	GUI.hpp	/^    Gtk::Box boxLayout{};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Box	access:private
LSESolveOutput::doRenderGraph	GUI.hpp	/^    bool doRenderGraph = false;$/;"	m	class:LSESolveOutput	typeref:typename:bool	access:private
LSESolveOutput::lseInputData	GUI.hpp	/^    std::weak_ptr<LSEInputData> lseInputData{};$/;"	m	class:LSESolveOutput	typeref:typename:std::weak_ptr<LSEInputData>	access:private
LSESolveOutput::lseSolveData	GUI.hpp	/^    std::weak_ptr<LSESolveData> lseSolveData{};$/;"	m	class:LSESolveOutput	typeref:typename:std::weak_ptr<LSESolveData>	access:private
LSESolveOutput::outputButton	GUI.hpp	/^    Gtk::Button outputButton{"Вивести в файл"};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Button	access:private
LSESolveOutput::outputFileName	GUI.hpp	/^    Gtk::Entry outputFileName{};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Entry	access:private
LSESolveOutput::outputGraph	GUI.hpp	/^    Gtk::DrawingArea outputGraph{};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::DrawingArea	access:private
LSESolveOutput::outputStatus	GUI.hpp	/^    Gtk::Label outputStatus{"Невідомий статус"};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Label	access:private
LSESolveOutput::saveSolve	GUI.cpp	/^void LSESolveOutput::saveSolve()$/;"	f	class:LSESolveOutput	typeref:typename:void	signature:()
LSESolveOutput::saveSolve	GUI.hpp	/^    void saveSolve();$/;"	p	class:LSESolveOutput	typeref:typename:void	access:private	signature:()
LSESolveOutput::varsDesc	GUI.hpp	/^    Gtk::Label varsDesc{"Рішення СЛАР:"};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Label	access:private
LSESolveOutput::varsValues	GUI.hpp	/^    Gtk::Label varsValues{""};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Label	access:private
LSESolver	LSESolver.cpp	/^LSESolver::LSESolver() = default;$/;"	p	class:LSESolver	file:	signature:()
LSESolver	LSESolver.hpp	/^    LSESolver();$/;"	p	class:LSESolver	access:public	signature:()
LSESolver	LSESolver.hpp	/^class LSESolver$/;"	c
LSESolver::GetTotalIterationsCount	LSESolver.cpp	/^std::optional<std::size_t> LSESolver::GetTotalIterationsCount()$/;"	f	class:LSESolver	typeref:typename:std::optional<std::size_t>	signature:()
LSESolver::GetTotalIterationsCount	LSESolver.hpp	/^    std::optional<std::size_t> GetTotalIterationsCount();$/;"	p	class:LSESolver	typeref:typename:std::optional<std::size_t>	access:public	signature:()
LSESolver::GetVariablesSolvesOnce	LSESolver.cpp	/^std::optional<Vector> LSESolver::GetVariablesSolvesOnce()$/;"	f	class:LSESolver	typeref:typename:std::optional<Vector>	signature:()
LSESolver::GetVariablesSolvesOnce	LSESolver.hpp	/^    std::optional<Vector> GetVariablesSolvesOnce();$/;"	p	class:LSESolver	typeref:typename:std::optional<Vector>	access:public	signature:()
LSESolver::IsLSESoledSuccessfully	LSESolver.cpp	/^std::optional<bool> LSESolver::IsLSESoledSuccessfully() const$/;"	f	class:LSESolver	typeref:typename:std::optional<bool>	signature:() const
LSESolver::IsLSESoledSuccessfully	LSESolver.hpp	/^    std::optional<bool> IsLSESoledSuccessfully() const;$/;"	p	class:LSESolver	typeref:typename:std::optional<bool>	access:public	signature:() const
LSESolver::LSESolver	LSESolver.cpp	/^LSESolver::LSESolver() = default;$/;"	p	class:LSESolver	file:	signature:()
LSESolver::LSESolver	LSESolver.hpp	/^    LSESolver();$/;"	p	class:LSESolver	access:public	signature:()
LSESolver::SetEquationsCount	LSESolver.cpp	/^BaseStatus LSESolver::SetEquationsCount(std::size_t equationsCount)$/;"	f	class:LSESolver	typeref:typename:BaseStatus	signature:(std::size_t equationsCount)
LSESolver::SetEquationsCount	LSESolver.hpp	/^    BaseStatus SetEquationsCount(std::size_t equationsCount);$/;"	p	class:LSESolver	typeref:typename:BaseStatus	access:public	signature:(std::size_t equationsCount)
LSESolver::SetFreeCoefficients	LSESolver.cpp	/^BaseStatus LSESolver::SetFreeCoefficients(const Vector& freeCoeffsVector)$/;"	f	class:LSESolver	typeref:typename:BaseStatus	signature:(const Vector & freeCoeffsVector)
LSESolver::SetFreeCoefficients	LSESolver.hpp	/^    BaseStatus SetFreeCoefficients(const Vector& freeCoeffsVector);$/;"	p	class:LSESolver	typeref:typename:BaseStatus	access:public	signature:(const Vector & freeCoeffsVector)
LSESolver::SetVariablesCoefficients	LSESolver.cpp	/^BaseStatus LSESolver::SetVariablesCoefficients(const Matrix& varsCoeffsMatrix)$/;"	f	class:LSESolver	typeref:typename:BaseStatus	signature:(const Matrix & varsCoeffsMatrix)
LSESolver::SetVariablesCoefficients	LSESolver.hpp	/^    BaseStatus SetVariablesCoefficients(const Matrix& varsCoeffsMatrix);$/;"	p	class:LSESolver	typeref:typename:BaseStatus	access:public	signature:(const Matrix & varsCoeffsMatrix)
LSESolver::SolveLSE	LSESolver.cpp	/^void LSESolver::SolveLSE()$/;"	f	class:LSESolver	typeref:typename:void	signature:()
LSESolver::SolveLSE	LSESolver.hpp	/^    void SolveLSE();$/;"	p	class:LSESolver	typeref:typename:void	access:public	signature:()
LSESolver::SolveLSEInternal	LSESolver.hpp	/^    virtual SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B) = 0;$/;"	p	class:LSESolver	typeref:typename:SolvingResult	access:protected	signature:(Matrix && A,Vector && B)
LSESolver::equationsCount	LSESolver.hpp	/^    std::size_t equationsCount = 0;$/;"	m	class:LSESolver	typeref:typename:std::size_t	access:protected
LSESolver::freeCoeffsVector	LSESolver.hpp	/^    Vector freeCoeffsVector{};$/;"	m	class:LSESolver	typeref:typename:Vector	access:protected
LSESolver::isEquationsCountSetted	LSESolver.hpp	/^    bool isEquationsCountSetted = false;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
LSESolver::isLSESoledSuccessfully	LSESolver.hpp	/^    bool isLSESoledSuccessfully = false;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
LSESolver::isSolvesKeeped	LSESolver.hpp	/^    bool isSolvesKeeped = true;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
LSESolver::isSolvingApplied	LSESolver.hpp	/^    bool isSolvingApplied       = false;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
LSESolver::totalIterationsCount	LSESolver.hpp	/^    std::size_t totalIterationsCount = 0;$/;"	m	class:LSESolver	typeref:typename:std::size_t	access:protected
LSESolver::variablesValues	LSESolver.hpp	/^    Vector variablesValues{};$/;"	m	class:LSESolver	typeref:typename:Vector	access:protected
LSESolver::varsCoeffsMatrix	LSESolver.hpp	/^    Matrix varsCoeffsMatrix{};$/;"	m	class:LSESolver	typeref:typename:Matrix	access:protected
LSESolver::~LSESolver	LSESolver.cpp	/^LSESolver::~LSESolver() = default;$/;"	p	class:LSESolver	file:	signature:()
LSESolver::~LSESolver	LSESolver.hpp	/^    virtual ~LSESolver();$/;"	p	class:LSESolver	access:public	signature:()
LSESolverFactoryProduce	LSESolversData.cpp	/^std::unique_ptr<LSESolver> LSESolverFactoryProduce(LSESolvingMethodIndex solverIndex)$/;"	f	typeref:typename:std::unique_ptr<LSESolver>	signature:(LSESolvingMethodIndex solverIndex)
LSESolverFactoryProduce	LSESolversData.hpp	/^std::unique_ptr<LSESolver> LSESolverFactoryProduce(LSESolvingMethodIndex solverIndex);$/;"	p	typeref:typename:std::unique_ptr<LSESolver>	signature:(LSESolvingMethodIndex solverIndex)
LSESolverUI	GUI.cpp	/^LSESolverUI::LSESolverUI()$/;"	f	class:LSESolverUI	signature:()
LSESolverUI	GUI.hpp	/^    LSESolverUI();$/;"	p	class:LSESolverUI	access:public	signature:()
LSESolverUI	GUI.hpp	/^class LSESolverUI : public Gtk::Frame$/;"	c	inherits:Gtk::Frame
LSESolverUI::LSESolverUI	GUI.cpp	/^LSESolverUI::LSESolverUI()$/;"	f	class:LSESolverUI	signature:()
LSESolverUI::LSESolverUI	GUI.hpp	/^    LSESolverUI();$/;"	p	class:LSESolverUI	access:public	signature:()
LSESolverUI::SetLSEInputData	GUI.hpp	/^    void SetLSEInputData(std::weak_ptr<LSEInputData> lseInputData)$/;"	f	class:LSESolverUI	typeref:typename:void	access:public	signature:(std::weak_ptr<LSEInputData> lseInputData)
LSESolverUI::SetLSESolveOutputUIRef	GUI.hpp	/^    void SetLSESolveOutputUIRef(std::weak_ptr<LSESolveOutput> lseSolveOutput)$/;"	f	class:LSESolverUI	typeref:typename:void	access:public	signature:(std::weak_ptr<LSESolveOutput> lseSolveOutput)
LSESolverUI::SetLSESolvesPlace	GUI.hpp	/^    void SetLSESolvesPlace(std::weak_ptr<LSESolveData> lseSolvesPlace)$/;"	f	class:LSESolverUI	typeref:typename:void	access:public	signature:(std::weak_ptr<LSESolveData> lseSolvesPlace)
LSESolverUI::comboBoxMethodsNames	GUI.hpp	/^    Gtk::ComboBoxText comboBoxMethodsNames{};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::ComboBoxText	access:private
LSESolverUI::lseInputData	GUI.hpp	/^    std::weak_ptr<LSEInputData> lseInputData;$/;"	m	class:LSESolverUI	typeref:typename:std::weak_ptr<LSEInputData>	access:private
LSESolverUI::lseSolveOutput	GUI.hpp	/^    std::weak_ptr<LSESolveOutput> lseSolveOutput;$/;"	m	class:LSESolverUI	typeref:typename:std::weak_ptr<LSESolveOutput>	access:private
LSESolverUI::lseSolvesPlace	GUI.hpp	/^    std::weak_ptr<LSESolveData> lseSolvesPlace;$/;"	m	class:LSESolverUI	typeref:typename:std::weak_ptr<LSESolveData>	access:private
LSESolverUI::onSolvingProcess	GUI.cpp	/^void LSESolverUI::onSolvingProcess()$/;"	f	class:LSESolverUI	typeref:typename:void	signature:()
LSESolverUI::onSolvingProcess	GUI.hpp	/^    void onSolvingProcess();$/;"	p	class:LSESolverUI	typeref:typename:void	access:private	signature:()
LSESolverUI::practicalTimeComplexity	GUI.hpp	/^    Gtk::Label practicalTimeComplexity{"Практ. час. складн. невідома"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Label	access:private
LSESolverUI::solveButton	GUI.hpp	/^    Gtk::Button solveButton{"Вирішити"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Button	access:private
LSESolverUI::solverInstruction	GUI.hpp	/^    Gtk::Label solverInstruction{"Виберіть один з методів:"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Label	access:private
LSESolverUI::solverRootBox	GUI.hpp	/^    Gtk::Box solverRootBox{};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Box	access:private
LSESolverUI::solvingStatus	GUI.hpp	/^    Gtk::Label solvingStatus{"Невідомий статус вирішення"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Label	access:private
LSESolvingMethodIndex	LSESolversData.hpp	/^enum LSESolvingMethodIndex$/;"	g
LSESolvingStatus	GUI.hpp	/^enum class LSESolvingStatus : uint8_t$/;"	g	typeref:typename:uint8_t
LUP	LSESolversData.hpp	/^      LUP            = 0$/;"	e	enum:LSESolvingMethodIndex	access:public
LUPDecResult	LSESolvers/LUPSolver.hpp	/^struct LUPDecResult$/;"	s
LUPDecResult::L	LSESolvers/LUPSolver.hpp	/^    Matrix L, U;$/;"	m	struct:LUPDecResult	typeref:typename:Matrix	access:public
LUPDecResult::P	LSESolvers/LUPSolver.hpp	/^    std::vector<std::size_t> P;$/;"	m	struct:LUPDecResult	typeref:typename:std::vector<std::size_t>	access:public
LUPDecResult::U	LSESolvers/LUPSolver.hpp	/^    Matrix L, U;$/;"	m	struct:LUPDecResult	typeref:typename:Matrix	access:public
LUPSolver	LSESolvers/LUPSolver.hpp	/^class LUPSolver : public LSESolver$/;"	c	inherits:LSESolver
LUPSolver::SolveLSEInternal	LSESolvers/LUPSolver.cpp	/^SolvingResult LUPSolver::SolveLSEInternal(Matrix&& A, Vector&& B)$/;"	f	class:LUPSolver	typeref:typename:SolvingResult	signature:(Matrix && A,Vector && B)
LUPSolver::SolveLSEInternal	LSESolvers/LUPSolver.hpp	/^    SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B) override;$/;"	p	class:LUPSolver	typeref:typename:SolvingResult	access:protected	signature:(Matrix && A,Vector && B)
LUPSolver::isCloseToZero	LSESolvers/LUPSolver.cpp	/^bool LUPSolver::isCloseToZero(double x)$/;"	f	class:LUPSolver	typeref:typename:bool	signature:(double x)
LUPSolver::isCloseToZero	LSESolvers/LUPSolver.hpp	/^    static bool isCloseToZero(double x);$/;"	p	class:LUPSolver	typeref:typename:bool	access:private	signature:(double x)
LUPSolver::lupDecompose	LSESolvers/LUPSolver.cpp	/^std::optional<LUPDecResult> LUPSolver::lupDecompose(Matrix A, IterationsCounter& itersCounter)$/;"	f	class:LUPSolver	typeref:typename:std::optional<LUPDecResult>	signature:(Matrix A,IterationsCounter & itersCounter)
LUPSolver::lupDecompose	LSESolvers/LUPSolver.hpp	/^    static std::optional<LUPDecResult> lupDecompose(Matrix A, IterationsCounter& itersCounter);$/;"	p	class:LUPSolver	typeref:typename:std::optional<LUPDecResult>	access:private	signature:(Matrix A,IterationsCounter & itersCounter)
LUPSolver::maxDiagLine	LSESolvers/LUPSolver.cpp	/^std::size_t LUPSolver::maxDiagLine(const Matrix& A, std::size_t baseColumn)$/;"	f	class:LUPSolver	typeref:typename:std::size_t	signature:(const Matrix & A,std::size_t baseColumn)
LUPSolver::maxDiagLine	LSESolvers/LUPSolver.hpp	/^    static std::size_t maxDiagLine(const Matrix& A, std::size_t baseColumn);$/;"	p	class:LUPSolver	typeref:typename:std::size_t	access:private	signature:(const Matrix & A,std::size_t baseColumn)
LUPSolver::solveX	LSESolvers/LUPSolver.cpp	/^Vector LUPSolver::solveX(const Matrix& U, const Vector& Y, IterationsCounter& itersCounter)$/;"	f	class:LUPSolver	typeref:typename:Vector	signature:(const Matrix & U,const Vector & Y,IterationsCounter & itersCounter)
LUPSolver::solveX	LSESolvers/LUPSolver.hpp	/^    static Vector solveX(const Matrix& U, const Vector& Y, IterationsCounter& itersCounter);$/;"	p	class:LUPSolver	typeref:typename:Vector	access:private	signature:(const Matrix & U,const Vector & Y,IterationsCounter & itersCounter)
LUPSolver::solveY	LSESolvers/LUPSolver.cpp	/^std::optional<Vector> LUPSolver::solveY($/;"	f	class:LUPSolver	typeref:typename:std::optional<Vector>	signature:(const Matrix & L,const std::vector<std::size_t> & P,const Vector & B,IterationsCounter & itersCounter)
LUPSolver::solveY	LSESolvers/LUPSolver.hpp	/^    static std::optional<Vector> solveY($/;"	p	class:LUPSolver	typeref:typename:std::optional<Vector>	access:private	signature:(const Matrix & L,const std::vector<std::size_t> & P,const Vector & B,IterationsCounter & itersCounter)
LUPSolver::~LUPSolver	LSESolvers/LUPSolver.hpp	/^    ~LUPSolver() override = default;$/;"	p	class:LUPSolver	access:public	signature:()
Logarithm	GUI.cpp	/^double Logarithm(double poweredValue, double base)$/;"	f	typeref:typename:double	signature:(double poweredValue,double base)
Matrix	Matrix.cpp	/^Matrix::Matrix() = default;$/;"	p	class:Matrix	file:	signature:()
Matrix	Matrix.cpp	/^Matrix::Matrix(std::size_t height, std::size_t width)$/;"	f	class:Matrix	signature:(std::size_t height,std::size_t width)
Matrix	Matrix.hpp	/^    Matrix();$/;"	p	class:Matrix	access:public	signature:()
Matrix	Matrix.hpp	/^    explicit Matrix(std::size_t height, std::size_t width);$/;"	p	class:Matrix	access:public	signature:(std::size_t height,std::size_t width)
Matrix	Matrix.hpp	/^class Matrix$/;"	c
Matrix::At	Matrix.cpp	/^double Matrix::At(std::size_t y, std::size_t x) const$/;"	f	class:Matrix	typeref:typename:double	signature:(std::size_t y,std::size_t x) const
Matrix::At	Matrix.cpp	/^double& Matrix::At(std::size_t y, std::size_t x)$/;"	f	class:Matrix	typeref:typename:double &	signature:(std::size_t y,std::size_t x)
Matrix::At	Matrix.hpp	/^    double At(std::size_t y, std::size_t x) const;$/;"	p	class:Matrix	typeref:typename:double	access:public	signature:(std::size_t y,std::size_t x) const
Matrix::At	Matrix.hpp	/^    double& At(std::size_t y, std::size_t x);$/;"	p	class:Matrix	typeref:typename:double &	access:public	signature:(std::size_t y,std::size_t x)
Matrix::Height	Matrix.cpp	/^std::size_t Matrix::Height() const noexcept$/;"	f	class:Matrix	typeref:typename:std::size_t	signature:() const
Matrix::Height	Matrix.hpp	/^    std::size_t Height() const noexcept;$/;"	p	class:Matrix	typeref:typename:std::size_t	access:public	signature:() const
Matrix::IsSquare	Matrix.cpp	/^bool Matrix::IsSquare() const noexcept$/;"	f	class:Matrix	typeref:typename:bool	signature:() const
Matrix::IsSquare	Matrix.hpp	/^    bool IsSquare() const noexcept;$/;"	p	class:Matrix	typeref:typename:bool	access:public	signature:() const
Matrix::Matrix	Matrix.cpp	/^Matrix::Matrix() = default;$/;"	p	class:Matrix	file:	signature:()
Matrix::Matrix	Matrix.cpp	/^Matrix::Matrix(std::size_t height, std::size_t width)$/;"	f	class:Matrix	signature:(std::size_t height,std::size_t width)
Matrix::Matrix	Matrix.hpp	/^    Matrix();$/;"	p	class:Matrix	access:public	signature:()
Matrix::Matrix	Matrix.hpp	/^    explicit Matrix(std::size_t height, std::size_t width);$/;"	p	class:Matrix	access:public	signature:(std::size_t height,std::size_t width)
Matrix::TryGetEdgeSize	Matrix.cpp	/^std::size_t Matrix::TryGetEdgeSize() const noexcept$/;"	f	class:Matrix	typeref:typename:std::size_t	signature:() const
Matrix::TryGetEdgeSize	Matrix.hpp	/^    std::size_t TryGetEdgeSize() const noexcept;$/;"	p	class:Matrix	typeref:typename:std::size_t	access:public	signature:() const
Matrix::Width	Matrix.cpp	/^std::size_t Matrix::Width() const noexcept$/;"	f	class:Matrix	typeref:typename:std::size_t	signature:() const
Matrix::Width	Matrix.hpp	/^    std::size_t Width() const noexcept;$/;"	p	class:Matrix	typeref:typename:std::size_t	access:public	signature:() const
Matrix::flatMtxElemRef	Matrix.cpp	/^double Matrix::flatMtxElemRef(std::size_t y, std::size_t x) const$/;"	f	class:Matrix	typeref:typename:double	signature:(std::size_t y,std::size_t x) const
Matrix::flatMtxElemRef	Matrix.cpp	/^double& Matrix::flatMtxElemRef(std::size_t y, std::size_t x)$/;"	f	class:Matrix	typeref:typename:double &	signature:(std::size_t y,std::size_t x)
Matrix::flatMtxElemRef	Matrix.hpp	/^    double flatMtxElemRef(std::size_t y, std::size_t x) const;$/;"	p	class:Matrix	typeref:typename:double	access:private	signature:(std::size_t y,std::size_t x) const
Matrix::flatMtxElemRef	Matrix.hpp	/^    double& flatMtxElemRef(std::size_t y, std::size_t x);$/;"	p	class:Matrix	typeref:typename:double &	access:private	signature:(std::size_t y,std::size_t x)
Matrix::flattenMatrixVH	Matrix.hpp	/^    std::vector<double> flattenMatrixVH{};$/;"	m	class:Matrix	typeref:typename:std::vector<double>	access:private
Matrix::height	Matrix.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:Matrix	typeref:typename:std::size_t	access:private
Matrix::width	Matrix.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:Matrix	typeref:typename:std::size_t	access:private
MethodName	LSESolversData.hpp	/^    std::string MethodName{"[не вказано]"};$/;"	m	struct:ComboBoxMethodRecord	typeref:typename:std::string	access:public
MethodPracticalItersComplexity	LSESolversData.hpp	/^    std::string MethodPracticalItersComplexity{"невідомо"};$/;"	m	struct:ComboBoxMethodRecord	typeref:typename:std::string	access:public
OutputSolve	GUI.cpp	/^void LSESolveOutput::OutputSolve()$/;"	f	class:LSESolveOutput	typeref:typename:void	signature:()
OutputSolve	GUI.hpp	/^    void OutputSolve();$/;"	p	class:LSESolveOutput	typeref:typename:void	access:public	signature:()
P	LSESolvers/LUPSolver.hpp	/^    std::vector<std::size_t> P;$/;"	m	struct:LUPDecResult	typeref:typename:std::vector<std::size_t>	access:public
ParseFormattedLSE	CLI.cpp	/^static std::optional<std::string> ParseFormattedLSE(const std::string& formattedLSE)$/;"	f	typeref:typename:std::optional<std::string>	file:	signature:(const std::string & formattedLSE)
Print	CLI.cpp	/^static void Print(const T& stringable)$/;"	f	typeref:typename:void	file:	signature:(const T & stringable)
PrintError	CLI.cpp	/^static void PrintError(const T& stringable)$/;"	f	typeref:typename:void	file:	signature:(const T & stringable)
PutInRange	GUI.cpp	/^double PutInRange(double value, double from, double to)$/;"	f	typeref:typename:double	signature:(double value,double from,double to)
ReadFromFile	Filesystem.cpp	/^std::optional<std::string> ReadFromFile(const std::string& inputFileName)$/;"	f	typeref:typename:std::optional<std::string>	signature:(const std::string & inputFileName)
ReadFromFile	Filesystem.hpp	/^std::optional<std::string> ReadFromFile(const std::string& inputFileName);$/;"	p	typeref:typename:std::optional<std::string>	signature:(const std::string & inputFileName)
ReadyWindow	GUI.cpp	/^void ApplicationWindow::ReadyWindow()$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:()
ReadyWindow	GUI.hpp	/^    void ReadyWindow();$/;"	p	class:ApplicationWindow	typeref:typename:void	access:public	signature:()
Rotation	LSESolversData.hpp	/^    , Rotation       = 2$/;"	e	enum:LSESolvingMethodIndex	access:public
RotationSolver	LSESolvers/RotationSolver.hpp	/^class RotationSolver : public LSESolver$/;"	c	inherits:LSESolver
RotationSolver::SolveLSEInternal	LSESolvers/RotationSolver.cpp	/^SolvingResult RotationSolver::SolveLSEInternal(Matrix&& A, Vector&& B)$/;"	f	class:RotationSolver	typeref:typename:SolvingResult	signature:(Matrix && A,Vector && B)
RotationSolver::SolveLSEInternal	LSESolvers/RotationSolver.hpp	/^    SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B);$/;"	p	class:RotationSolver	typeref:typename:SolvingResult	access:private	signature:(Matrix && A,Vector && B)
RotationSolver::isCloseToZero	LSESolvers/RotationSolver.cpp	/^bool RotationSolver::isCloseToZero(double x)$/;"	f	class:RotationSolver	typeref:typename:bool	signature:(double x)
RotationSolver::isCloseToZero	LSESolvers/RotationSolver.hpp	/^    static bool isCloseToZero(double x);$/;"	p	class:RotationSolver	typeref:typename:bool	access:private	signature:(double x)
RotationSolver::~RotationSolver	LSESolvers/RotationSolver.hpp	/^    ~RotationSolver() override = default;$/;"	p	class:RotationSolver	access:public	signature:()
Run	CLI.cpp	/^int CLISession::Run(int argc, char *argv[])$/;"	f	class:CLISession	typeref:typename:int	signature:(int argc,char * argv[])
Run	CLI.hpp	/^    int Run(int argc, char *argv[]);$/;"	p	class:CLISession	typeref:typename:int	access:public	signature:(int argc,char * argv[])
SetApplicationData	GUI.cpp	/^void ApplicationWindow::SetApplicationData(std::weak_ptr<ApplicationData> appData)$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:(std::weak_ptr<ApplicationData> appData)
SetApplicationData	GUI.hpp	/^    void SetApplicationData(std::weak_ptr<ApplicationData> appData);$/;"	p	class:ApplicationWindow	typeref:typename:void	access:public	signature:(std::weak_ptr<ApplicationData> appData)
SetBeginTimePoint	GUI.cpp	/^    void SetBeginTimePoint()$/;"	f	class:TimeDifferenceRuler	typeref:typename:void	file:	access:public	signature:()
SetEndTimePoint	GUI.cpp	/^    void SetEndTimePoint()$/;"	f	class:TimeDifferenceRuler	typeref:typename:void	file:	access:public	signature:()
SetEquationsCount	LSESolver.cpp	/^BaseStatus LSESolver::SetEquationsCount(std::size_t equationsCount)$/;"	f	class:LSESolver	typeref:typename:BaseStatus	signature:(std::size_t equationsCount)
SetEquationsCount	LSESolver.hpp	/^    BaseStatus SetEquationsCount(std::size_t equationsCount);$/;"	p	class:LSESolver	typeref:typename:BaseStatus	access:public	signature:(std::size_t equationsCount)
SetFreeCoefficients	LSESolver.cpp	/^BaseStatus LSESolver::SetFreeCoefficients(const Vector& freeCoeffsVector)$/;"	f	class:LSESolver	typeref:typename:BaseStatus	signature:(const Vector & freeCoeffsVector)
SetFreeCoefficients	LSESolver.hpp	/^    BaseStatus SetFreeCoefficients(const Vector& freeCoeffsVector);$/;"	p	class:LSESolver	typeref:typename:BaseStatus	access:public	signature:(const Vector & freeCoeffsVector)
SetItersCount	LSESolver.cpp	/^SolvingResult& SolvingResult::SetItersCount(std::size_t itersCount)$/;"	f	class:SolvingResult	typeref:typename:SolvingResult &	signature:(std::size_t itersCount)
SetItersCount	LSESolver.hpp	/^    SolvingResult& SetItersCount(std::size_t itersCount);$/;"	p	struct:SolvingResult	typeref:typename:SolvingResult &	access:public	signature:(std::size_t itersCount)
SetLSEInputData	GUI.cpp	/^void LSEConfigurator::SetLSEInputData(std::weak_ptr<LSEInputData> lseInputData)$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:(std::weak_ptr<LSEInputData> lseInputData)
SetLSEInputData	GUI.hpp	/^    void SetLSEInputData(std::weak_ptr<LSEInputData> lseInputData)$/;"	f	class:LSESolverUI	typeref:typename:void	access:public	signature:(std::weak_ptr<LSEInputData> lseInputData)
SetLSEInputData	GUI.hpp	/^    void SetLSEInputData(std::weak_ptr<LSEInputData> lseInputData);$/;"	p	class:LSEConfigurator	typeref:typename:void	access:public	signature:(std::weak_ptr<LSEInputData> lseInputData)
SetLSEInputDataRef	GUI.hpp	/^    void SetLSEInputDataRef(std::weak_ptr<LSEInputData> lseInputData)$/;"	f	class:LSESolveOutput	typeref:typename:void	access:public	signature:(std::weak_ptr<LSEInputData> lseInputData)
SetLSEOutputDataRef	GUI.hpp	/^    void SetLSEOutputDataRef(std::weak_ptr<LSESolveData> lseSolveData)$/;"	f	class:LSESolveOutput	typeref:typename:void	access:public	signature:(std::weak_ptr<LSESolveData> lseSolveData)
SetLSESolveOutputUIRef	GUI.hpp	/^    void SetLSESolveOutputUIRef(std::weak_ptr<LSESolveOutput> lseSolveOutput)$/;"	f	class:LSESolverUI	typeref:typename:void	access:public	signature:(std::weak_ptr<LSESolveOutput> lseSolveOutput)
SetLSESolvesPlace	GUI.hpp	/^    void SetLSESolvesPlace(std::weak_ptr<LSESolveData> lseSolvesPlace)$/;"	f	class:LSESolverUI	typeref:typename:void	access:public	signature:(std::weak_ptr<LSESolveData> lseSolvesPlace)
SetVariablesCoefficients	LSESolver.cpp	/^BaseStatus LSESolver::SetVariablesCoefficients(const Matrix& varsCoeffsMatrix)$/;"	f	class:LSESolver	typeref:typename:BaseStatus	signature:(const Matrix & varsCoeffsMatrix)
SetVariablesCoefficients	LSESolver.hpp	/^    BaseStatus SetVariablesCoefficients(const Matrix& varsCoeffsMatrix);$/;"	p	class:LSESolver	typeref:typename:BaseStatus	access:public	signature:(const Matrix & varsCoeffsMatrix)
Size	Vector.cpp	/^std::size_t Vector::Size() const noexcept$/;"	f	class:Vector	typeref:typename:std::size_t	signature:() const
Size	Vector.hpp	/^    std::size_t Size() const noexcept;$/;"	p	class:Vector	typeref:typename:std::size_t	access:public	signature:() const
SolveLSE	LSESolver.cpp	/^void LSESolver::SolveLSE()$/;"	f	class:LSESolver	typeref:typename:void	signature:()
SolveLSE	LSESolver.hpp	/^    void SolveLSE();$/;"	p	class:LSESolver	typeref:typename:void	access:public	signature:()
SolveLSEInternal	LSESolver.hpp	/^    virtual SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B) = 0;$/;"	p	class:LSESolver	typeref:typename:SolvingResult	access:protected	signature:(Matrix && A,Vector && B)
SolveLSEInternal	LSESolvers/GaussHoletskiySolver.cpp	/^SolvingResult GaussHoletskiySolver::SolveLSEInternal(Matrix&& A, Vector&& B)$/;"	f	class:GaussHoletskiySolver	typeref:typename:SolvingResult	signature:(Matrix && A,Vector && B)
SolveLSEInternal	LSESolvers/GaussHoletskiySolver.hpp	/^    SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B);$/;"	p	class:GaussHoletskiySolver	typeref:typename:SolvingResult	access:protected	signature:(Matrix && A,Vector && B)
SolveLSEInternal	LSESolvers/LUPSolver.cpp	/^SolvingResult LUPSolver::SolveLSEInternal(Matrix&& A, Vector&& B)$/;"	f	class:LUPSolver	typeref:typename:SolvingResult	signature:(Matrix && A,Vector && B)
SolveLSEInternal	LSESolvers/LUPSolver.hpp	/^    SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B) override;$/;"	p	class:LUPSolver	typeref:typename:SolvingResult	access:protected	signature:(Matrix && A,Vector && B)
SolveLSEInternal	LSESolvers/RotationSolver.cpp	/^SolvingResult RotationSolver::SolveLSEInternal(Matrix&& A, Vector&& B)$/;"	f	class:RotationSolver	typeref:typename:SolvingResult	signature:(Matrix && A,Vector && B)
SolveLSEInternal	LSESolvers/RotationSolver.hpp	/^    SolvingResult SolveLSEInternal(Matrix&& A, Vector&& B);$/;"	p	class:RotationSolver	typeref:typename:SolvingResult	access:private	signature:(Matrix && A,Vector && B)
SolvedFailful	GUI.hpp	/^    Unsolved, SolvedSuccessfuly, SolvedFailful$/;"	e	enum:LSESolvingStatus	access:public
SolvedSuccessfuly	GUI.hpp	/^    Unsolved, SolvedSuccessfuly, SolvedFailful$/;"	e	enum:LSESolvingStatus	access:public
SolvingMethodIndex	LSESolversData.hpp	/^    LSESolvingMethodIndex SolvingMethodIndex;$/;"	m	struct:ComboBoxMethodRecord	typeref:typename:LSESolvingMethodIndex	access:public
SolvingResult	LSESolver.cpp	/^SolvingResult::SolvingResult() = default;$/;"	p	class:SolvingResult	file:	signature:()
SolvingResult	LSESolver.hpp	/^    SolvingResult();$/;"	p	struct:SolvingResult	access:public	signature:()
SolvingResult	LSESolver.hpp	/^struct SolvingResult$/;"	s
SolvingResult::Error	LSESolver.cpp	/^SolvingResult SolvingResult::Error()$/;"	f	class:SolvingResult	typeref:typename:SolvingResult	signature:()
SolvingResult::Error	LSESolver.hpp	/^    static SolvingResult Error();$/;"	p	struct:SolvingResult	typeref:typename:SolvingResult	access:public	signature:()
SolvingResult::IsSuccessful	LSESolver.hpp	/^    bool IsSuccessful = false;$/;"	m	struct:SolvingResult	typeref:typename:bool	access:public
SolvingResult::ItersCount	LSESolver.hpp	/^    std::size_t ItersCount = 0;$/;"	m	struct:SolvingResult	typeref:typename:std::size_t	access:public
SolvingResult::SetItersCount	LSESolver.cpp	/^SolvingResult& SolvingResult::SetItersCount(std::size_t itersCount)$/;"	f	class:SolvingResult	typeref:typename:SolvingResult &	signature:(std::size_t itersCount)
SolvingResult::SetItersCount	LSESolver.hpp	/^    SolvingResult& SetItersCount(std::size_t itersCount);$/;"	p	struct:SolvingResult	typeref:typename:SolvingResult &	access:public	signature:(std::size_t itersCount)
SolvingResult::SolvingResult	LSESolver.cpp	/^SolvingResult::SolvingResult() = default;$/;"	p	class:SolvingResult	file:	signature:()
SolvingResult::SolvingResult	LSESolver.hpp	/^    SolvingResult();$/;"	p	struct:SolvingResult	access:public	signature:()
SolvingResult::Successful	LSESolver.hpp	/^    static SolvingResult Successful(auto&& varsValues)$/;"	f	struct:SolvingResult	typeref:typename:SolvingResult	access:public	signature:(auto && varsValues)
SolvingResult::VarsValues	LSESolver.hpp	/^    Vector VarsValues{};$/;"	m	struct:SolvingResult	typeref:typename:Vector	access:public
SolvingStatus	GUI.hpp	/^    LSESolvingStatus SolvingStatus = LSESolvingStatus::Unsolved;$/;"	m	struct:LSESolveData	typeref:typename:LSESolvingStatus	access:public
Success	LSESolver.hpp	/^    Success, Error$/;"	e	enum:BaseStatus	access:public
Successful	LSESolver.hpp	/^    static SolvingResult Successful(auto&& varsValues)$/;"	f	struct:SolvingResult	typeref:typename:SolvingResult	access:public	signature:(auto && varsValues)
TimeDifferenceRuler	GUI.cpp	/^    TimeDifferenceRuler() = default;$/;"	p	class:TimeDifferenceRuler	file:	access:public	signature:()
TimeDifferenceRuler	GUI.cpp	/^class TimeDifferenceRuler$/;"	c	file:
TimeDifferenceRuler::GetTimeDifference	GUI.cpp	/^    double GetTimeDifference()$/;"	f	class:TimeDifferenceRuler	typeref:typename:double	file:	access:public	signature:()
TimeDifferenceRuler::SetBeginTimePoint	GUI.cpp	/^    void SetBeginTimePoint()$/;"	f	class:TimeDifferenceRuler	typeref:typename:void	file:	access:public	signature:()
TimeDifferenceRuler::SetEndTimePoint	GUI.cpp	/^    void SetEndTimePoint()$/;"	f	class:TimeDifferenceRuler	typeref:typename:void	file:	access:public	signature:()
TimeDifferenceRuler::TimeDifferenceRuler	GUI.cpp	/^    TimeDifferenceRuler() = default;$/;"	p	class:TimeDifferenceRuler	file:	access:public	signature:()
TimeDifferenceRuler::beginTimePoint	GUI.cpp	/^    std::chrono::time_point<std::chrono::high_resolution_clock> beginTimePoint{};$/;"	m	class:TimeDifferenceRuler	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>	file:	access:private
TimeDifferenceRuler::endTimePoint	GUI.cpp	/^    std::chrono::time_point<std::chrono::high_resolution_clock> endTimePoint{};$/;"	m	class:TimeDifferenceRuler	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>	file:	access:private
ToInteger	Convert.cpp	/^std::optional<std::ptrdiff_t> ToInteger(const std::string& mayFormattedInt)$/;"	f	typeref:typename:std::optional<std::ptrdiff_t>	signature:(const std::string & mayFormattedInt)
ToInteger	Convert.hpp	/^std::optional<std::ptrdiff_t> ToInteger(const std::string& mayFormattedInt);$/;"	p	typeref:typename:std::optional<std::ptrdiff_t>	signature:(const std::string & mayFormattedInt)
ToNumber	Convert.cpp	/^std::optional<double> ToNumber(const std::string& str)$/;"	f	typeref:typename:std::optional<double>	signature:(const std::string & str)
ToNumber	Convert.hpp	/^std::optional<double> ToNumber(const std::string& str);/;"	p	typeref:typename:std::optional<double>	signature:(const std::string & str)
TryGetEdgeSize	Matrix.cpp	/^std::size_t Matrix::TryGetEdgeSize() const noexcept$/;"	f	class:Matrix	typeref:typename:std::size_t	signature:() const
TryGetEdgeSize	Matrix.hpp	/^    std::size_t TryGetEdgeSize() const noexcept;$/;"	p	class:Matrix	typeref:typename:std::size_t	access:public	signature:() const
U	LSESolvers/LUPSolver.hpp	/^    Matrix L, U;$/;"	m	struct:LUPDecResult	typeref:typename:Matrix	access:public
Unsolved	GUI.hpp	/^    Unsolved, SolvedSuccessfuly, SolvedFailful$/;"	e	enum:LSESolvingStatus	access:public
VarsValues	LSESolver.hpp	/^    Vector VarsValues{};$/;"	m	struct:SolvingResult	typeref:typename:Vector	access:public
Vector	Vector.cpp	/^Vector::Vector() = default;$/;"	p	class:Vector	file:	signature:()
Vector	Vector.cpp	/^Vector::Vector(std::size_t vectorSize)$/;"	f	class:Vector	signature:(std::size_t vectorSize)
Vector	Vector.hpp	/^    Vector();$/;"	p	class:Vector	access:public	signature:()
Vector	Vector.hpp	/^    explicit Vector(std::size_t vectorSize);$/;"	p	class:Vector	access:public	signature:(std::size_t vectorSize)
Vector	Vector.hpp	/^class Vector$/;"	c
Vector::Size	Vector.cpp	/^std::size_t Vector::Size() const noexcept$/;"	f	class:Vector	typeref:typename:std::size_t	signature:() const
Vector::Size	Vector.hpp	/^    std::size_t Size() const noexcept;$/;"	p	class:Vector	typeref:typename:std::size_t	access:public	signature:() const
Vector::Vector	Vector.cpp	/^Vector::Vector() = default;$/;"	p	class:Vector	file:	signature:()
Vector::Vector	Vector.cpp	/^Vector::Vector(std::size_t vectorSize)$/;"	f	class:Vector	signature:(std::size_t vectorSize)
Vector::Vector	Vector.hpp	/^    Vector();$/;"	p	class:Vector	access:public	signature:()
Vector::Vector	Vector.hpp	/^    explicit Vector(std::size_t vectorSize);$/;"	p	class:Vector	access:public	signature:(std::size_t vectorSize)
Vector::numbersVector	Vector.hpp	/^    std::vector<double> numbersVector{};$/;"	m	class:Vector	typeref:typename:std::vector<double>	access:private
Vector::operator []	Vector.cpp	/^double Vector::operator[](std::size_t index) const$/;"	f	class:Vector	typeref:typename:double	signature:(std::size_t index) const
Vector::operator []	Vector.cpp	/^double& Vector::operator[](std::size_t index)$/;"	f	class:Vector	typeref:typename:double &	signature:(std::size_t index)
Vector::operator []	Vector.hpp	/^    double operator[](std::size_t index) const;$/;"	p	class:Vector	typeref:typename:double	access:public	signature:(std::size_t index) const
Vector::operator []	Vector.hpp	/^    double& operator[](std::size_t index);$/;"	p	class:Vector	typeref:typename:double &	access:public	signature:(std::size_t index)
Width	AllocArray2D.inc.hpp	/^    std::size_t Width() const noexcept$/;"	f	class:AllocArray2D	typeref:typename:std::size_t	access:public	signature:() const
Width	Matrix.cpp	/^std::size_t Matrix::Width() const noexcept$/;"	f	class:Matrix	typeref:typename:std::size_t	signature:() const
Width	Matrix.hpp	/^    std::size_t Width() const noexcept;$/;"	p	class:Matrix	typeref:typename:std::size_t	access:public	signature:() const
WriteToFile	Filesystem.cpp	/^bool WriteToFile(const std::string& outputFileName, const std::string& newContent)$/;"	f	typeref:typename:bool	signature:(const std::string & outputFileName,const std::string & newContent)
WriteToFile	Filesystem.hpp	/^bool WriteToFile(const std::string& fileName, const std::string& content);$/;"	p	typeref:typename:bool	signature:(const std::string & fileName,const std::string & content)
X	GUI.hpp	/^    Vector X{};$/;"	m	struct:LSESolveData	typeref:typename:Vector	access:public
__anon28b0de9b0102	GUI.cpp	/^        {$/;"	f	function:LSESolveOutput::LSESolveOutput	file:	signature:(const Cairo::RefPtr<Cairo::Context>& canvas) 
appData	GUI.hpp	/^    std::shared_ptr<ApplicationData> appData = std::make_shared<ApplicationData>();$/;"	m	class:GUISession	typeref:typename:std::shared_ptr<ApplicationData>	access:private
appWin	GUI.hpp	/^    ApplicationWindow appWin{};$/;"	m	class:GUISession	typeref:typename:ApplicationWindow	access:private
beginTimePoint	GUI.cpp	/^    std::chrono::time_point<std::chrono::high_resolution_clock> beginTimePoint{};$/;"	m	class:TimeDifferenceRuler	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>	file:	access:private
boxLayout	GUI.hpp	/^    Gtk::Box boxLayout{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Box	access:private
boxLayout	GUI.hpp	/^    Gtk::Box boxLayout{};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Box	access:private
comboBoxMethodRecords	LSESolversData.cpp	/^std::vector<ComboBoxMethodRecord> comboBoxMethodRecords =$/;"	v	typeref:typename:std::vector<ComboBoxMethodRecord>
comboBoxMethodsNames	GUI.hpp	/^    Gtk::ComboBoxText comboBoxMethodsNames{};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::ComboBoxText	access:private
createEqsForm	GUI.cpp	/^void LSEConfigurator::createEqsForm(std::size_t eqsCount)$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:(std::size_t eqsCount)
createEqsForm	GUI.hpp	/^    void createEqsForm(std::size_t eqsCount);$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:(std::size_t eqsCount)
doRenderGraph	GUI.hpp	/^    bool doRenderGraph = false;$/;"	m	class:LSESolveOutput	typeref:typename:bool	access:private
endTimePoint	GUI.cpp	/^    std::chrono::time_point<std::chrono::high_resolution_clock> endTimePoint{};$/;"	m	class:TimeDifferenceRuler	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>	file:	access:private
eqsConfStatus	GUI.hpp	/^    Gtk::Label eqsConfStatus{"Невідомий статус"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
eqsCountFirstHorAlign	GUI.hpp	/^    Gtk::Alignment eqsCountFirstHorAlign{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Alignment	access:private
eqsCountProp	GUI.hpp	/^    Gtk::Label eqsCountProp{"Кількість рівнянь:"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
eqsCountValue	GUI.hpp	/^    Gtk::Label eqsCountValue{"не вказано"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
eqsFormBox	GUI.hpp	/^    Gtk::Box eqsFormBox{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Box	access:private
eqsPropConfGrid	GUI.hpp	/^    Gtk::Grid eqsPropConfGrid{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Grid	access:private
eqsSetAsInput	GUI.hpp	/^    Gtk::Button eqsSetAsInput{"Встановити дану СЛАР"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Button	access:private
eqsSetterButton	GUI.hpp	/^    Gtk::Button eqsSetterButton{"Нова СЛАР"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Button	access:private
eqsSetterEntry	GUI.hpp	/^    Gtk::Entry  eqsSetterEntry{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Entry	access:private
eqsSetterProp	GUI.hpp	/^    Gtk::Label  eqsSetterProp{"Встановити кількість:"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Label	access:private
eqsZeroFillerButton	GUI.hpp	/^    Gtk::Button eqsZeroFillerButton{"Заповнити пусті кліт. 0-ми"};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Button	access:private
equationsCount	LSESolver.hpp	/^    std::size_t equationsCount = 0;$/;"	m	class:LSESolver	typeref:typename:std::size_t	access:protected
fillEmptyEntriesWithZeroes	GUI.cpp	/^void LSEConfigurator::fillEmptyEntriesWithZeroes()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
fillEmptyEntriesWithZeroes	GUI.hpp	/^    void fillEmptyEntriesWithZeroes();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
fixedLayout	GUI.hpp	/^    Gtk::Fixed fixedLayout;$/;"	m	class:ApplicationWindow	typeref:typename:Gtk::Fixed	access:private
flatArray2DElemRef	AllocArray2D.inc.hpp	/^    T& flatArray2DElemRef(std::size_t y, std::size_t x)$/;"	f	class:AllocArray2D	typeref:typename:T &	access:private	signature:(std::size_t y,std::size_t x)
flatArray2DElemRef	AllocArray2D.inc.hpp	/^    const T& flatArray2DElemRef(std::size_t y, std::size_t x) const$/;"	f	class:AllocArray2D	typeref:typename:const T &	access:private	signature:(std::size_t y,std::size_t x) const
flatMtxElemRef	Matrix.cpp	/^double Matrix::flatMtxElemRef(std::size_t y, std::size_t x) const$/;"	f	class:Matrix	typeref:typename:double	signature:(std::size_t y,std::size_t x) const
flatMtxElemRef	Matrix.cpp	/^double& Matrix::flatMtxElemRef(std::size_t y, std::size_t x)$/;"	f	class:Matrix	typeref:typename:double &	signature:(std::size_t y,std::size_t x)
flatMtxElemRef	Matrix.hpp	/^    double flatMtxElemRef(std::size_t y, std::size_t x) const;$/;"	p	class:Matrix	typeref:typename:double	access:private	signature:(std::size_t y,std::size_t x) const
flatMtxElemRef	Matrix.hpp	/^    double& flatMtxElemRef(std::size_t y, std::size_t x);$/;"	p	class:Matrix	typeref:typename:double &	access:private	signature:(std::size_t y,std::size_t x)
flattenArray2DVH	AllocArray2D.inc.hpp	/^    std::vector<T> flattenArray2DVH{};$/;"	m	class:AllocArray2D	typeref:typename:std::vector<T>	access:private
flattenMatrixVH	Matrix.hpp	/^    std::vector<double> flattenMatrixVH{};$/;"	m	class:Matrix	typeref:typename:std::vector<double>	access:private
freeCoeffsEntries	GUI.hpp	/^    std::vector<Gtk::Entry>  freeCoeffsEntries{};$/;"	m	class:LSEConfigurator	typeref:typename:std::vector<Gtk::Entry>	access:private
freeCoeffsGrid	GUI.hpp	/^    Gtk::Grid freeCoeffsGrid{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Grid	access:private
freeCoeffsVector	LSESolver.hpp	/^    Vector freeCoeffsVector{};$/;"	m	class:LSESolver	typeref:typename:Vector	access:protected
functions	GUI.cpp	/^    struct functions$/;"	s	function:FormatExecTime	file:
height	AllocArray2D.inc.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:AllocArray2D	typeref:typename:std::size_t	access:private
height	Matrix.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:Matrix	typeref:typename:std::size_t	access:private
initializeEqsCount	GUI.cpp	/^void LSEConfigurator::initializeEqsCount()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
initializeEqsCount	GUI.hpp	/^    void initializeEqsCount();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
initializeEqsForm	GUI.cpp	/^void LSEConfigurator::initializeEqsForm()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
initializeEqsForm	GUI.hpp	/^    void initializeEqsForm();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
initializeWidgets	GUI.cpp	/^void ApplicationWindow::initializeWidgets()$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:()
initializeWidgets	GUI.hpp	/^    void initializeWidgets();$/;"	p	class:ApplicationWindow	typeref:typename:void	access:private	signature:()
initializeWindowHead	GUI.cpp	/^void ApplicationWindow::initializeWindowHead()$/;"	f	class:ApplicationWindow	typeref:typename:void	signature:()
initializeWindowHead	GUI.hpp	/^    void initializeWindowHead();$/;"	p	class:ApplicationWindow	typeref:typename:void	access:private	signature:()
isCloseToZero	LSESolvers/GaussHoletskiySolver.cpp	/^bool GaussHoletskiySolver::isCloseToZero(double x)$/;"	f	class:GaussHoletskiySolver	typeref:typename:bool	signature:(double x)
isCloseToZero	LSESolvers/GaussHoletskiySolver.hpp	/^    static bool isCloseToZero(double x);$/;"	p	class:GaussHoletskiySolver	typeref:typename:bool	access:private	signature:(double x)
isCloseToZero	LSESolvers/LUPSolver.cpp	/^bool LUPSolver::isCloseToZero(double x)$/;"	f	class:LUPSolver	typeref:typename:bool	signature:(double x)
isCloseToZero	LSESolvers/LUPSolver.hpp	/^    static bool isCloseToZero(double x);$/;"	p	class:LUPSolver	typeref:typename:bool	access:private	signature:(double x)
isCloseToZero	LSESolvers/RotationSolver.cpp	/^bool RotationSolver::isCloseToZero(double x)$/;"	f	class:RotationSolver	typeref:typename:bool	signature:(double x)
isCloseToZero	LSESolvers/RotationSolver.hpp	/^    static bool isCloseToZero(double x);$/;"	p	class:RotationSolver	typeref:typename:bool	access:private	signature:(double x)
isCloseToZeroForSolves	LSESolvers/GaussHoletskiySolver.cpp	/^bool GaussHoletskiySolver::isCloseToZeroForSolves(double x)$/;"	f	class:GaussHoletskiySolver	typeref:typename:bool	signature:(double x)
isCloseToZeroForSolves	LSESolvers/GaussHoletskiySolver.hpp	/^    static bool isCloseToZeroForSolves(double x);$/;"	p	class:GaussHoletskiySolver	typeref:typename:bool	access:private	signature:(double x)
isEquationsCountSetted	LSESolver.hpp	/^    bool isEquationsCountSetted = false;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
isLSESoledSuccessfully	LSESolver.hpp	/^    bool isLSESoledSuccessfully = false;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
isSolveSuitable	LSESolvers/GaussHoletskiySolver.cpp	/^bool GaussHoletskiySolver::isSolveSuitable(const Matrix& A, const Vector& B, const Vector& X)$/;"	f	class:GaussHoletskiySolver	typeref:typename:bool	signature:(const Matrix & A,const Vector & B,const Vector & X)
isSolveSuitable	LSESolvers/GaussHoletskiySolver.hpp	/^    static bool isSolveSuitable(const Matrix& A, const Vector& B, const Vector& X);$/;"	p	class:GaussHoletskiySolver	typeref:typename:bool	access:private	signature:(const Matrix & A,const Vector & B,const Vector & X)
isSolvesKeeped	LSESolver.hpp	/^    bool isSolvesKeeped = true;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
isSolvingApplied	LSESolver.hpp	/^    bool isSolvingApplied       = false;$/;"	m	class:LSESolver	typeref:typename:bool	access:protected
itersCount	LSESolver.hpp	/^    std::size_t itersCount = 0;$/;"	m	class:IterationsCounter	typeref:typename:std::size_t	access:private
ldlDecompose	LSESolvers/GaussHoletskiySolver.cpp	/^std::optional<LDLDecResult> GaussHoletskiySolver::ldlDecompose(const Matrix& A, IterationsCounte/;"	f	class:GaussHoletskiySolver	typeref:typename:std::optional<LDLDecResult>	signature:(const Matrix & A,IterationsCounter & itersCounter)
ldlDecompose	LSESolvers/GaussHoletskiySolver.hpp	/^    static std::optional<LDLDecResult> ldlDecompose(const Matrix& A, IterationsCounter& itersCou/;"	p	class:GaussHoletskiySolver	typeref:typename:std::optional<LDLDecResult>	access:private	signature:(const Matrix & A,IterationsCounter & itersCounter)
lseConfigurator	GUI.hpp	/^    LSEConfigurator lseConfigurator;$/;"	m	class:ApplicationWindow	typeref:typename:LSEConfigurator	access:private
lseData	GUI.hpp	/^    std::weak_ptr<LSEInputData> lseData{};$/;"	m	class:LSEConfigurator	typeref:typename:std::weak_ptr<LSEInputData>	access:private
lseInputData	GUI.hpp	/^    std::shared_ptr<LSEInputData> lseInputData$/;"	m	class:ApplicationData	typeref:typename:std::shared_ptr<LSEInputData>	access:private
lseInputData	GUI.hpp	/^    std::weak_ptr<LSEInputData> lseInputData;$/;"	m	class:LSESolverUI	typeref:typename:std::weak_ptr<LSEInputData>	access:private
lseInputData	GUI.hpp	/^    std::weak_ptr<LSEInputData> lseInputData{};$/;"	m	class:LSESolveOutput	typeref:typename:std::weak_ptr<LSEInputData>	access:private
lseSolveData	GUI.hpp	/^    std::weak_ptr<LSESolveData> lseSolveData{};$/;"	m	class:LSESolveOutput	typeref:typename:std::weak_ptr<LSESolveData>	access:private
lseSolveOutput	GUI.hpp	/^    std::shared_ptr<LSESolveOutput> lseSolveOutput = std::make_shared<LSESolveOutput>();$/;"	m	class:ApplicationWindow	typeref:typename:std::shared_ptr<LSESolveOutput>	access:private
lseSolveOutput	GUI.hpp	/^    std::weak_ptr<LSESolveOutput> lseSolveOutput;$/;"	m	class:LSESolverUI	typeref:typename:std::weak_ptr<LSESolveOutput>	access:private
lseSolver	GUI.hpp	/^    LSESolverUI     lseSolver;$/;"	m	class:ApplicationWindow	typeref:typename:LSESolverUI	access:private
lseSolves	GUI.hpp	/^    std::shared_ptr<LSESolveData> lseSolves$/;"	m	class:ApplicationData	typeref:typename:std::shared_ptr<LSESolveData>	access:private
lseSolvesPlace	GUI.hpp	/^    std::weak_ptr<LSESolveData> lseSolvesPlace;$/;"	m	class:LSESolverUI	typeref:typename:std::weak_ptr<LSESolveData>	access:private
lupDecompose	LSESolvers/LUPSolver.cpp	/^std::optional<LUPDecResult> LUPSolver::lupDecompose(Matrix A, IterationsCounter& itersCounter)$/;"	f	class:LUPSolver	typeref:typename:std::optional<LUPDecResult>	signature:(Matrix A,IterationsCounter & itersCounter)
lupDecompose	LSESolvers/LUPSolver.hpp	/^    static std::optional<LUPDecResult> lupDecompose(Matrix A, IterationsCounter& itersCounter);$/;"	p	class:LUPSolver	typeref:typename:std::optional<LUPDecResult>	access:private	signature:(Matrix A,IterationsCounter & itersCounter)
main	Program.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
maxDiagLine	LSESolvers/LUPSolver.cpp	/^std::size_t LUPSolver::maxDiagLine(const Matrix& A, std::size_t baseColumn)$/;"	f	class:LUPSolver	typeref:typename:std::size_t	signature:(const Matrix & A,std::size_t baseColumn)
maxDiagLine	LSESolvers/LUPSolver.hpp	/^    static std::size_t maxDiagLine(const Matrix& A, std::size_t baseColumn);$/;"	p	class:LUPSolver	typeref:typename:std::size_t	access:private	signature:(const Matrix & A,std::size_t baseColumn)
numbersVector	Vector.hpp	/^    std::vector<double> numbersVector{};$/;"	m	class:Vector	typeref:typename:std::vector<double>	access:private
onEqsCountSetting	GUI.cpp	/^void LSEConfigurator::onEqsCountSetting()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
onEqsCountSetting	GUI.hpp	/^    void onEqsCountSetting();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
onSolvingProcess	GUI.cpp	/^void LSESolverUI::onSolvingProcess()$/;"	f	class:LSESolverUI	typeref:typename:void	signature:()
onSolvingProcess	GUI.hpp	/^    void onSolvingProcess();$/;"	p	class:LSESolverUI	typeref:typename:void	access:private	signature:()
operator []	Vector.cpp	/^double Vector::operator[](std::size_t index) const$/;"	f	class:Vector	typeref:typename:double	signature:(std::size_t index) const
operator []	Vector.cpp	/^double& Vector::operator[](std::size_t index)$/;"	f	class:Vector	typeref:typename:double &	signature:(std::size_t index)
operator []	Vector.hpp	/^    double operator[](std::size_t index) const;$/;"	p	class:Vector	typeref:typename:double	access:public	signature:(std::size_t index) const
operator []	Vector.hpp	/^    double& operator[](std::size_t index);$/;"	p	class:Vector	typeref:typename:double &	access:public	signature:(std::size_t index)
outputButton	GUI.hpp	/^    Gtk::Button outputButton{"Вивести в файл"};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Button	access:private
outputFileName	GUI.hpp	/^    Gtk::Entry outputFileName{};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Entry	access:private
outputGraph	GUI.hpp	/^    Gtk::DrawingArea outputGraph{};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::DrawingArea	access:private
outputStatus	GUI.hpp	/^    Gtk::Label outputStatus{"Невідомий статус"};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Label	access:private
practicalTimeComplexity	GUI.hpp	/^    Gtk::Label practicalTimeComplexity{"Практ. час. складн. невідома"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Label	access:private
removeEqsForm	GUI.cpp	/^void LSEConfigurator::removeEqsForm()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
removeEqsForm	GUI.hpp	/^    void removeEqsForm();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
saveSolve	GUI.cpp	/^void LSESolveOutput::saveSolve()$/;"	f	class:LSESolveOutput	typeref:typename:void	signature:()
saveSolve	GUI.hpp	/^    void saveSolve();$/;"	p	class:LSESolveOutput	typeref:typename:void	access:private	signature:()
setEqsAsInput	GUI.cpp	/^void LSEConfigurator::setEqsAsInput()$/;"	f	class:LSEConfigurator	typeref:typename:void	signature:()
setEqsAsInput	GUI.hpp	/^    void setEqsAsInput();$/;"	p	class:LSEConfigurator	typeref:typename:void	access:private	signature:()
solveButton	GUI.hpp	/^    Gtk::Button solveButton{"Вирішити"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Button	access:private
solveX	LSESolvers/GaussHoletskiySolver.cpp	/^Vector GaussHoletskiySolver::solveX(const Matrix& L, const Vector& Z, IterationsCounter& itersCo/;"	f	class:GaussHoletskiySolver	typeref:typename:Vector	signature:(const Matrix & L,const Vector & Z,IterationsCounter & itersCounter)
solveX	LSESolvers/GaussHoletskiySolver.hpp	/^    static Vector solveX(const Matrix& L, const Vector& Z, IterationsCounter& itersCounter);$/;"	p	class:GaussHoletskiySolver	typeref:typename:Vector	access:private	signature:(const Matrix & L,const Vector & Z,IterationsCounter & itersCounter)
solveX	LSESolvers/LUPSolver.cpp	/^Vector LUPSolver::solveX(const Matrix& U, const Vector& Y, IterationsCounter& itersCounter)$/;"	f	class:LUPSolver	typeref:typename:Vector	signature:(const Matrix & U,const Vector & Y,IterationsCounter & itersCounter)
solveX	LSESolvers/LUPSolver.hpp	/^    static Vector solveX(const Matrix& U, const Vector& Y, IterationsCounter& itersCounter);$/;"	p	class:LUPSolver	typeref:typename:Vector	access:private	signature:(const Matrix & U,const Vector & Y,IterationsCounter & itersCounter)
solveY	LSESolvers/GaussHoletskiySolver.cpp	/^Vector GaussHoletskiySolver::solveY(const Matrix& L, const Vector& B, IterationsCounter& itersCo/;"	f	class:GaussHoletskiySolver	typeref:typename:Vector	signature:(const Matrix & L,const Vector & B,IterationsCounter & itersCounter)
solveY	LSESolvers/GaussHoletskiySolver.hpp	/^    static Vector solveY(const Matrix& L, const Vector& B, IterationsCounter& itersCounter);$/;"	p	class:GaussHoletskiySolver	typeref:typename:Vector	access:private	signature:(const Matrix & L,const Vector & B,IterationsCounter & itersCounter)
solveY	LSESolvers/LUPSolver.cpp	/^std::optional<Vector> LUPSolver::solveY($/;"	f	class:LUPSolver	typeref:typename:std::optional<Vector>	signature:(const Matrix & L,const std::vector<std::size_t> & P,const Vector & B,IterationsCounter & itersCounter)
solveY	LSESolvers/LUPSolver.hpp	/^    static std::optional<Vector> solveY($/;"	p	class:LUPSolver	typeref:typename:std::optional<Vector>	access:private	signature:(const Matrix & L,const std::vector<std::size_t> & P,const Vector & B,IterationsCounter & itersCounter)
solveZ	LSESolvers/GaussHoletskiySolver.cpp	/^std::optional<Vector> GaussHoletskiySolver::solveZ(const Matrix& D, const Vector& Y, IterationsC/;"	f	class:GaussHoletskiySolver	typeref:typename:std::optional<Vector>	signature:(const Matrix & D,const Vector & Y,IterationsCounter & itersCounter)
solveZ	LSESolvers/GaussHoletskiySolver.hpp	/^    static std::optional<Vector> solveZ(const Matrix& D, const Vector& Y, IterationsCounter& ite/;"	p	class:GaussHoletskiySolver	typeref:typename:std::optional<Vector>	access:private	signature:(const Matrix & D,const Vector & Y,IterationsCounter & itersCounter)
solverInstruction	GUI.hpp	/^    Gtk::Label solverInstruction{"Виберіть один з методів:"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Label	access:private
solverRootBox	GUI.hpp	/^    Gtk::Box solverRootBox{};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Box	access:private
solvingStatus	GUI.hpp	/^    Gtk::Label solvingStatus{"Невідомий статус вирішення"};$/;"	m	class:LSESolverUI	typeref:typename:Gtk::Label	access:private
toInt	GUI.cpp	/^        static std::ptrdiff_t toInt(double x)$/;"	f	struct:FormatExecTime::functions	typeref:typename:std::ptrdiff_t	file:	access:public	signature:(double x)
totalIterationsCount	LSESolver.hpp	/^    std::size_t totalIterationsCount = 0;$/;"	m	class:LSESolver	typeref:typename:std::size_t	access:protected
variablesValues	LSESolver.hpp	/^    Vector variablesValues{};$/;"	m	class:LSESolver	typeref:typename:Vector	access:protected
varsCoeffsEntries	GUI.hpp	/^    AllocArray2D<Gtk::Entry> varsCoeffsEntries{};$/;"	m	class:LSEConfigurator	typeref:typename:AllocArray2D<Gtk::Entry>	access:private
varsCoeffsGrid	GUI.hpp	/^    Gtk::Grid varsCoeffsGrid{};$/;"	m	class:LSEConfigurator	typeref:typename:Gtk::Grid	access:private
varsCoeffsMatrix	LSESolver.hpp	/^    Matrix varsCoeffsMatrix{};$/;"	m	class:LSESolver	typeref:typename:Matrix	access:protected
varsDesc	GUI.hpp	/^    Gtk::Label varsDesc{"Рішення СЛАР:"};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Label	access:private
varsValues	GUI.hpp	/^    Gtk::Label varsValues{""};$/;"	m	class:LSESolveOutput	typeref:typename:Gtk::Label	access:private
width	AllocArray2D.inc.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:AllocArray2D	typeref:typename:std::size_t	access:private
width	Matrix.hpp	/^    std::size_t width = 0, height = 0;$/;"	m	class:Matrix	typeref:typename:std::size_t	access:private
windowBorderWidth	GUI.hpp	/^    CLASS_CONST auto windowBorderWidth = 10;$/;"	m	class:ApplicationWindow	typeref:typename:CLASS_CONST auto	access:private
windowSize	GUI.hpp	/^    CLASS_CONST auto windowSize = std::pair(1000, 600);$/;"	m	class:ApplicationWindow	typeref:typename:CLASS_CONST auto	access:private
windowTitle	GUI.hpp	/^    CLASS_CONST auto windowTitle = "Розв'язальник СЛАР";$/;"	m	class:ApplicationWindow	typeref:typename:CLASS_CONST auto	access:private
~GaussHoletskiySolver	LSESolvers/GaussHoletskiySolver.hpp	/^    ~GaussHoletskiySolver() override = default;$/;"	p	class:GaussHoletskiySolver	access:public	signature:()
~LSESolver	LSESolver.cpp	/^LSESolver::~LSESolver() = default;$/;"	p	class:LSESolver	file:	signature:()
~LSESolver	LSESolver.hpp	/^    virtual ~LSESolver();$/;"	p	class:LSESolver	access:public	signature:()
~LUPSolver	LSESolvers/LUPSolver.hpp	/^    ~LUPSolver() override = default;$/;"	p	class:LUPSolver	access:public	signature:()
~RotationSolver	LSESolvers/RotationSolver.hpp	/^    ~RotationSolver() override = default;$/;"	p	class:RotationSolver	access:public	signature:()
